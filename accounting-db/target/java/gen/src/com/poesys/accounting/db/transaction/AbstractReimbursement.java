/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.transaction;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the Reimbursement. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A link between a receivable item and another receivable item that reimburses the
 * first one; the first one is a debit against a receivable account, the second one
 * is a credit against the same account. The accounts associated with related items
 * must be the same. One receivable item can be reimbursed by several reimbursement
 * items, and one reimbursement item can reimburse several receivables. For
 * example, you take a business trip and have 15 separate items that you submit as
 * receivables from the company. The company pays you with a single expense check:
 * that creates 15 links to the various receivables. If it pays you with a couple
 * of different checks, there would still be 15 links, but there would be multiple
 * reimbursement items in the set as well as multiple receivable items. A link has
 * a reimbursement amount that must be less than or equal to the reimbursement
 * item's amount (part or all of the amount constitutes the reimbursement); the set
 * of links for one reimbursement item must have reimbursement amounts that sum to
 * less than the item amount. There can also be allocated amounts that aren't
 * reimbursed; those are not part of the summation validation, but they do
 * participate in sums of amounts applied to the receivable--the sum of all link
 * reimbursement and allocated amounts for a specific receivable item should be
 * less than or equal to the receivable amount; less than means the receivable was
 * not entirely reimbursed and requires additional payments (or writing off). You
 * can have a reimbursement link with a zero reimbursement amount and a positive
 * allocated amount.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractReimbursement extends AbstractDto implements IReimbursement {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractReimbursement.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractReimbursement> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractReimbursement>();

  // Setter strategy nested classes for single-object associations
  
  /**
   * Post-process setter for post-processing nested object property reimbursingItemsItem.
   */
  private class PostProcessReimbursingItemSetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property reimbursingItemsItem source: AddAssociationKeyObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessReimbursingItemSetter object.
     */
    public PostProcessReimbursingItemSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (reimbursingItem != null) {
        array.add(reimbursingItem);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }


  /**
   * Post-process setter for post-processing nested object property receivablesItem.
   */
  private class PostProcessReceivableSetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property receivablesItem source: AddAssociationKeyObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessReceivableSetter object.
     */
    public PostProcessReceivableSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (receivable != null) {
        array.add(receivable);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }



  /**
   * Create an empty Reimbursement for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractReimbursement() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the reimbursingItemsItem property.
    postProcessSetters.add(new PostProcessReimbursingItemSetter());

    // Add the setters for the receivablesItem property.
    postProcessSetters.add(new PostProcessReceivableSetter());
  }

  /**
   * Create a Reimbursement. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Reimbursement
   * @param receivablesObject wraps an associated IItem object
   * @param reimbursingItemsObject wraps an associated IItem object
   * @param receivablesOrderNumber Attribute that is part of the association key
   * @param reimbursingItemsOrderNumber Attribute that is part of the association key
   * @param receivablesTransactionId Attribute that is part of the association key
   * @param reimbursingItemsTransactionId Attribute that is part of the association key
   * @param reimbursedAmount the amount of the receivable item amount that is reimbursed by the reimbursement
item (must be less than or equal to the reimbursement amount)
   * @param allocatedAmount dollar amount not reimbursed by any reimbursement item; this "writes off" the
allocated amount when summing up amounts applied against the receivable
   */
  public AbstractReimbursement(IPrimaryKey key, com.poesys.accounting.db.transaction.IItem receivablesObject, com.poesys.accounting.db.transaction.IItem reimbursingItemsObject, java.lang.Integer receivablesOrderNumber, java.lang.Integer reimbursingItemsOrderNumber, java.math.BigInteger receivablesTransactionId, java.math.BigInteger reimbursingItemsTransactionId, java.lang.Double reimbursedAmount, java.lang.Double allocatedAmount) {
    this.key = key;

    this.receivablesOrderNumber = receivablesOrderNumber;

    if (receivablesOrderNumber == null) {
      throw new com.poesys.db.InvalidParametersException("receivablesOrderNumber is required for " + key.getValueList());
    }
    
    this.reimbursingItemsOrderNumber = reimbursingItemsOrderNumber;

    if (reimbursingItemsOrderNumber == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursingItemsOrderNumber is required for " + key.getValueList());
    }
    
    this.receivablesTransactionId = receivablesTransactionId;

    if (receivablesTransactionId == null) {
      throw new com.poesys.db.InvalidParametersException("receivablesTransactionId is required for " + key.getValueList());
    }
    
    this.reimbursingItemsTransactionId = reimbursingItemsTransactionId;

    if (reimbursingItemsTransactionId == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursingItemsTransactionId is required for " + key.getValueList());
    }
    
    this.reimbursedAmount = reimbursedAmount;

    if (reimbursedAmount == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursedAmount is required for " + key.getValueList());
    }
    
    this.allocatedAmount = allocatedAmount;

    if (allocatedAmount == null) {
      throw new com.poesys.db.InvalidParametersException("allocatedAmount is required for " + key.getValueList());
    }
    
    // Associated key object
    receivable = receivablesObject;
    
    // Associated key object
    reimbursingItem = reimbursingItemsObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the reimbursingItem property.
    postProcessSetters.add(new PostProcessReimbursingItemSetter());
    
    
    // Add the setters for the receivable property.
    postProcessSetters.add(new PostProcessReceivableSetter());
    
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractReimbursement");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    IReimbursement other = (IReimbursement)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IReimbursement other = (IReimbursement)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.transaction";
  }

  @Override
  public void markChildrenDeleted() {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property reimbursedAmount
   *
   * <p>
   * the amount of the receivable item amount that is reimbursed by the reimbursement
   * item (must be less than or equal to the reimbursement amount)
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Double reimbursedAmount;
  
  /**
   * Get an object of java.lang.Double.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Double
   */

  public java.lang.Double getReimbursedAmount() {
    return reimbursedAmount;
  }

  /**
   * Clear the reimbursedAmount data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReimbursedAmount() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the reimbursedAmount.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the amount of the receivable item amount that is reimbursed by the reimbursement
   * item (must be less than or equal to the reimbursement amount)
   * </p>
   *
   * @param reimbursedAmount the value with which to set the property
   */
  public void setReimbursedAmount(java.lang.Double reimbursedAmount)
      throws com.poesys.db.InvalidParametersException {
    if (reimbursedAmount == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursedAmount is required");
    }
    
    this.reimbursedAmount = reimbursedAmount;
    setChanged();
  }
  /**
   * Nested property allocatedAmount
   *
   * <p>
   * dollar amount not reimbursed by any reimbursement item; this "writes off" the
   * allocated amount when summing up amounts applied against the receivable
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Double allocatedAmount;
  
  /**
   * Get an object of java.lang.Double.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Double
   */

  public java.lang.Double getAllocatedAmount() {
    return allocatedAmount;
  }

  /**
   * Clear the allocatedAmount data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAllocatedAmount() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the allocatedAmount.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * dollar amount not reimbursed by any reimbursement item; this "writes off" the
   * allocated amount when summing up amounts applied against the receivable
   * </p>
   *
   * @param allocatedAmount the value with which to set the property
   */
  public void setAllocatedAmount(java.lang.Double allocatedAmount)
      throws com.poesys.db.InvalidParametersException {
    if (allocatedAmount == null) {
      throw new com.poesys.db.InvalidParametersException("allocatedAmount is required");
    }
    
    this.allocatedAmount = allocatedAmount;
    setChanged();
  }
  /**
   * Nested property reimbursingItem
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private com.poesys.accounting.db.transaction.IItem reimbursingItem;
  
  /**
   * Get an object of com.poesys.accounting.db.transaction.IItem.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.accounting.db.transaction.IItem
   */

  public com.poesys.accounting.db.transaction.IItem getReimbursingItem() {
    return reimbursingItem;
  }

  /**
   * Clear the reimbursingItem data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReimbursingItem() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the reimbursingItem.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Associated object
   * </p>
   *
   * @param reimbursingItem the value with which to set the property
   */
  void setReimbursingItem(com.poesys.accounting.db.transaction.IItem reimbursingItem)
      throws com.poesys.db.InvalidParametersException {
    if (reimbursingItem == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursingItem is required");
    }
    
    this.reimbursingItem = reimbursingItem;
    setChanged();
  }
  /**
   * Nested property receivable
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private com.poesys.accounting.db.transaction.IItem receivable;
  
  /**
   * Get an object of com.poesys.accounting.db.transaction.IItem.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.accounting.db.transaction.IItem
   */

  public com.poesys.accounting.db.transaction.IItem getReceivable() {
    return receivable;
  }

  /**
   * Clear the receivable data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReceivable() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the receivable.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Associated object
   * </p>
   *
   * @param receivable the value with which to set the property
   */
  void setReceivable(com.poesys.accounting.db.transaction.IItem receivable)
      throws com.poesys.db.InvalidParametersException {
    if (receivable == null) {
      throw new com.poesys.db.InvalidParametersException("receivable is required");
    }
    
    this.receivable = receivable;
    setChanged();
  }
  /**
   * Nested property receivablesOrderNumber
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer receivablesOrderNumber;
  
  /**
   * Get an object of java.lang.Integer.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Integer
   */

  public java.lang.Integer getReceivablesOrderNumber() {
    return receivablesOrderNumber;
  }

  /**
   * Clear the receivablesOrderNumber data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReceivablesOrderNumber() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the receivablesOrderNumber.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param receivablesOrderNumber the value with which to set the property
   */
  void setReceivablesOrderNumber(java.lang.Integer receivablesOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    if (receivablesOrderNumber == null) {
      throw new com.poesys.db.InvalidParametersException("receivablesOrderNumber is required");
    }
    
    this.receivablesOrderNumber = receivablesOrderNumber;
    setChanged();
  }
  /**
   * Nested property reimbursingItemsOrderNumber
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer reimbursingItemsOrderNumber;
  
  /**
   * Get an object of java.lang.Integer.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Integer
   */

  public java.lang.Integer getReimbursingItemsOrderNumber() {
    return reimbursingItemsOrderNumber;
  }

  /**
   * Clear the reimbursingItemsOrderNumber data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReimbursingItemsOrderNumber() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the reimbursingItemsOrderNumber.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param reimbursingItemsOrderNumber the value with which to set the property
   */
  void setReimbursingItemsOrderNumber(java.lang.Integer reimbursingItemsOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    if (reimbursingItemsOrderNumber == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursingItemsOrderNumber is required");
    }
    
    this.reimbursingItemsOrderNumber = reimbursingItemsOrderNumber;
    setChanged();
  }
  /**
   * Nested property receivablesTransactionId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger receivablesTransactionId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getReceivablesTransactionId() {
    return receivablesTransactionId;
  }

  /**
   * Clear the receivablesTransactionId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReceivablesTransactionId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the receivablesTransactionId.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param receivablesTransactionId the value with which to set the property
   */
  void setReceivablesTransactionId(java.math.BigInteger receivablesTransactionId)
      throws com.poesys.db.InvalidParametersException {
    if (receivablesTransactionId == null) {
      throw new com.poesys.db.InvalidParametersException("receivablesTransactionId is required");
    }
    
    this.receivablesTransactionId = receivablesTransactionId;
    setChanged();
  }
  /**
   * Nested property reimbursingItemsTransactionId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger reimbursingItemsTransactionId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getReimbursingItemsTransactionId() {
    return reimbursingItemsTransactionId;
  }

  /**
   * Clear the reimbursingItemsTransactionId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearReimbursingItemsTransactionId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the reimbursingItemsTransactionId.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param reimbursingItemsTransactionId the value with which to set the property
   */
  void setReimbursingItemsTransactionId(java.math.BigInteger reimbursingItemsTransactionId)
      throws com.poesys.db.InvalidParametersException {
    if (reimbursingItemsTransactionId == null) {
      throw new com.poesys.db.InvalidParametersException("reimbursingItemsTransactionId is required");
    }
    
    this.reimbursingItemsTransactionId = reimbursingItemsTransactionId;
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {
  }

  /**
   * Create the inserters for the Reimbursement and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IReimbursement> reimbursementFactory =
      manager.getFactory("com.poesys.accounting.db.transaction.Reimbursement",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IReimbursement> sql =
      new com.poesys.accounting.db.transaction.sql.InsertReimbursement();
    com.poesys.db.dao.insert.IInsert<IReimbursement> inserter =
      reimbursementFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}