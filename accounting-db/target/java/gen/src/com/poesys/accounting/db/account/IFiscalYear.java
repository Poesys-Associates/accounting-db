/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package com.poesys.accounting.db.account;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the FiscalYear. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * An accounting period, usually either coterminous with a calendar year with the
 * same name or varying over an annual period starting on a particular calendar
 * date within the year; identifies a complete accounting period for statements
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface IFiscalYear extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   */
  void markChildrenDeleted();

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * the fiscal year, a year value corresponding to the calendar year of the last day
   * of an accounting period
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: year
   * </p>
   * @return a java.lang.Integer year
   */
  public java.lang.Integer getYear();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the calendar day of the first day of the accounting period
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: startDate
   * </p>
   * @return a java.sql.Timestamp startDate
   */
  public java.sql.Timestamp getStartDate();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the startDate.
   * </p>
   *
   * @param startDate the value to set into the startDate
   * @throws com.poesys.db.InvalidParametersException when the startDate 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setStartDate(java.sql.Timestamp startDate) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the last calendar day of the accounting period; year corresponds to the fiscal
   * year number
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: endDate
   * </p>
   * @return a java.sql.Timestamp endDate
   */
  public java.sql.Timestamp getEndDate();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the endDate.
   * </p>
   *
   * @param endDate the value to set into the endDate
   * @throws com.poesys.db.InvalidParametersException when the endDate 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setEndDate(java.sql.Timestamp endDate) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the set of accounts active during the given fiscal year, ordered by an order
   * number; used in constructing financial statements
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: Account
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: accounts
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IFiscalYear object.
   * </p>
   * @return a java.util.List<com.poesys.accounting.db.account.IAccount> accounts
   */
  public java.util.List<com.poesys.accounting.db.account.IAccount> getAccounts();

  /**
   * Clear the accounts so that it will lazily reload.
   */
  public void clearAccounts();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the accounts.
   * </p>
   *
   * @param accounts the value to set into the accounts
   * @throws com.poesys.db.InvalidParametersException when the accounts 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setAccount(java.util.List<com.poesys.accounting.db.account.IAccount> accounts) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * Owning DTO: FiscalYearAccount
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: accounts
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IFiscalYear object.
   * </p>
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount();

  /**
   * Clear the fiscalYearAccount so that it will lazily reload.
   */
  public void clearFiscalYearAccount();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the fiscalYearAccount.
   * </p>
   *
   * @param fiscalYearAccount the value to set into the fiscalYearAccount
   * @throws com.poesys.db.InvalidParametersException when the fiscalYearAccount 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount) throws com.poesys.db.InvalidParametersException;


  /**
   * Add a Account object to the accounts collection.
   *
   * @param object the object to add to the collection
   */
  public void addAccountsAccount(com.poesys.accounting.db.account.IAccount object);

  /**
   * Add a FiscalYearAccount object to the fiscalYearAccount collection.
   *
   * @param object the object to add to the collection
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object);
}