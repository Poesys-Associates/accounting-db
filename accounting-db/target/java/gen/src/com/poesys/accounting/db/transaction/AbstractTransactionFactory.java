/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package com.poesys.accounting.db.transaction;


import java.math.BigInteger;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.col.AbstractColumnValue;
import com.poesys.db.col.IntegerColumnValue;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.db.pk.PrimaryKeyFactory;


/**
 * <p>
 * A separate, shareable set of factory methods for all the transaction classes,
 * including JDBC data-setting, parameter-setting, and primary-key-generation
 * methods. This class is abstract and has a single concrete subclass,
 * TransactionFactory, that you can modify to override the default behavior in
 * the abstract class or implement an as-yet unimplemented method.
 * </p>
 * 
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTransactionFactory {
  /**
   * Retrieve the Item data from the result set's current row and create a Item
   * object.
   * 
   * @param key the primary key for the Transaction
   * @param rs the query result set
   * @return a Item instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IItem getItemData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument transactionId gets the JDBC value with a function
    // call.
    java.math.BigInteger transactionIdValue =
      rs.getBigDecimal("transactionId") == null ? null
          : rs.getBigDecimal("transactionId").toBigInteger();
    ;
    // Constructor argument orderNumber gets the JDBC value with a function
    // call.
    java.lang.Integer orderNumberValue = rs.getInt("orderNumber");
    // Constructor argument amount gets the JDBC value with a function call.
    java.lang.Double amountValue = rs.getDouble("amount");
    // Constructor argument debit gets the JDBC value with a function call.
    java.lang.Boolean debitValue = rs.getBoolean("debit");
    // Constructor argument checked gets the JDBC value with a function call.
    java.lang.Boolean checkedValue = rs.getBoolean("checked");
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Item has lazily loaded members or is a lazily loaded association class,
    // so create a Proxy.
    IItem newObject =
      new ItemProxy(new Item(key,
                             transactionIdValue,
                             orderNumberValue,
                             amountValue,
                             debitValue,
                             checkedValue,
                             accountNameValue,
                             entityNameValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a Item based on a result set that must contain the
   * Item primary key columns. The method creates a primary key of a type
   * specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a Item CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getItemPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getTransactionPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Integer orderNumberValue = rs.getInt("orderNumber");
    list.add(new com.poesys.db.col.IntegerColumnValue(prefix + "orderNumber",
                                                      orderNumberValue));
    IPrimaryKey subKey =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.transaction.Item");
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey,
                                                            subKey,
                                                            "com.poesys.accounting.db.transaction.Item");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Item based on input key attributes. The method
   * creates a primary key of a type specified by the primary key stereotype on
   * the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param orderNumber
   * @param transactionId composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @return a Item CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getItemPrimaryKey(java.lang.Integer orderNumber,
                                              java.math.BigInteger transactionId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getTransactionPrimaryKey(transactionId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.IntegerColumnValue("orderNumber",
                                                        orderNumber));
      IPrimaryKey subKey =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.transaction.Item");
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey,
                                                              subKey,
                                                              "com.poesys.accounting.db.transaction.Item");
    }
    return key;
  }

  /**
   * Get the transaction item primary key initialized with an integer id and
   * order number and with column names prefixed with a specified String value.
   * This is a custom method that produces keys for recursive associations.
   * 
   * @param prefix the column name prefix
   * @param orderNumber the integer order number
   * @param transactionId the integer id
   * @return the primary key
   * @throws InvalidParametersException
   */
  private static IPrimaryKey getPrefixedItemPrimaryKey(String prefix,
                                                       Integer orderNumber,
                                                       BigInteger transactionId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey =
      getPrefixedTransactionPrimaryKey(prefix, transactionId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      List<AbstractColumnValue> list = new ArrayList<AbstractColumnValue>();
      list.add(new IntegerColumnValue(prefix + "OrderNumber", orderNumber));
      IPrimaryKey subKey =
        PrimaryKeyFactory.createNaturalKey(list,
                                           "com.poesys.accounting.db.transaction.Item");
      key =
        PrimaryKeyFactory.createCompositeKey(parentKey,
                                             subKey,
                                             "com.poesys.accounting.db.transaction.Item");
    }
    return key;
  }

  /**
   * Retrieve the Transaction data from the result set's current row and create
   * a Transaction object.
   * 
   * @param key the primary key for the Transaction
   * @param rs the query result set
   * @return a Transaction instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ITransaction getTransactionData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument transactionId gets the JDBC value with a function
    // call.
    java.math.BigInteger transactionIdValue =
      rs.getBigDecimal("transactionId") == null ? null
          : rs.getBigDecimal("transactionId").toBigInteger();
    ;
    // Constructor argument description gets the JDBC value with a function
    // call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument transactionDate gets the JDBC value with a function
    // call.
    java.sql.Timestamp transactionDateValue =
      rs.getTimestamp("transactionDate");
    // Constructor argument checked gets the JDBC value with a function call.
    java.lang.Boolean checkedValue = rs.getBoolean("checked");
    // Constructor argument balance gets the JDBC value with a function call.
    java.lang.Boolean balanceValue = rs.getBoolean("balance");
    // Transaction has no lazily loaded members, so there is no need for Proxy.
    ITransaction newObject =
      new Transaction(key,
                      transactionIdValue,
                      descriptionValue,
                      transactionDateValue,
                      checkedValue,
                      balanceValue);
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a Transaction based on a result set that must contain
   * the Transaction primary key columns. The method creates a primary key of a
   * type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a Transaction SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTransactionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger transactionIdValue =
      rs.getBigDecimal("transactionId") == null ? null
          : rs.getBigDecimal("transactionId").toBigInteger();
    ;
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix
                                                               + "transactionId",
                                                           transactionIdValue,
                                                           "com.poesys.accounting.db.transaction.Transaction");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Transaction based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * <li>SequenceKey</li>
   * </ul>
   * 
   * @param transactionId primary key attribute
   * @return a Transaction SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getTransactionPrimaryKey(java.math.BigInteger transactionId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (transactionId != null) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("transactionId",
                                                             transactionId,
                                                             "com.poesys.accounting.db.transaction.Transaction");
    }
    return key;
  }

  /**
   * Get the transaction primary key initialized with an integer id and with a
   * column name prefixed with a specified String value. This is a custom method
   * that produces keys for recursive associations.
   * 
   * @param prefix the column name prefix
   * @param transactionId the integer id
   * @return the primary key
   * @throws InvalidParametersException
   */
  private static IPrimaryKey getPrefixedTransactionPrimaryKey(String prefix,
                                                              BigInteger transactionId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (transactionId != null) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix
                                                                 + "TransactionId",
                                                             transactionId,
                                                             "com.poesys.accounting.db.transaction.Transaction");
    }
    return key;
  }

  /**
   * Retrieve the Reimbursement data from the result set's current row and
   * create a Reimbursement object.
   * 
   * @param key the primary key for the Transaction
   * @param rs the query result set
   * @return a Reimbursement instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IReimbursement getReimbursementData(IPrimaryKey key,
                                                    ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.accounting.db.transaction.IItem receivablesObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.accounting.db.transaction.IItem reimbursingItemsObject = null;
    // Constructor argument receivablesOrderNumber gets the JDBC value with a
    // function call.
    java.lang.Integer receivablesOrderNumberValue =
      rs.getInt("receivablesOrderNumber");
    // Constructor argument reimbursingItemsOrderNumber gets the JDBC value with
    // a function call.
    java.lang.Integer reimbursingItemsOrderNumberValue =
      rs.getInt("reimbursingItemsOrderNumber");
    // Constructor argument receivablesTransactionId gets the JDBC value with a
    // function call.
    java.math.BigInteger receivablesTransactionIdValue =
      rs.getBigDecimal("receivablesTransactionId") == null ? null
          : rs.getBigDecimal("receivablesTransactionId").toBigInteger();
    ;
    // Constructor argument reimbursingItemsTransactionId gets the JDBC value
    // with a function call.
    java.math.BigInteger reimbursingItemsTransactionIdValue =
      rs.getBigDecimal("reimbursingItemsTransactionId") == null ? null
          : rs.getBigDecimal("reimbursingItemsTransactionId").toBigInteger();
    ;
    // Constructor argument reimbursedAmount gets the JDBC value with a function
    // call.
    java.lang.Double reimbursedAmountValue = rs.getDouble("reimbursedAmount");
    // Constructor argument allocatedAmount gets the JDBC value with a function
    // call.
    java.lang.Double allocatedAmountValue = rs.getDouble("allocatedAmount");
    // Reimbursement has lazily loaded members or is a lazily loaded association
    // class, so create a Proxy.
    IReimbursement newObject =
      new ReimbursementProxy(new Reimbursement(key,
                                               receivablesObject,
                                               reimbursingItemsObject,
                                               receivablesOrderNumberValue,
                                               reimbursingItemsOrderNumberValue,
                                               receivablesTransactionIdValue,
                                               reimbursingItemsTransactionIdValue,
                                               reimbursedAmountValue,
                                               allocatedAmountValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a Reimbursement based on a result set that must
   * contain the Reimbursement primary key columns. The method creates a primary
   * key of a type specified by the primary key stereotype on the persistent
   * class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>AssociationKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a Reimbursement AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getReimbursementPrimaryKey(ResultSet rs,
                                                       String prefix)
      throws SQLException, InvalidParametersException {
    return getReimbursementPrimaryKey(rs.getInt("receivablesOrderNumber"),
                                      rs.getInt("reimbursingItemsOrderNumber"),
                                      rs.getBigDecimal("receivablesTransactionId").toBigInteger(),
                                      rs.getBigDecimal("reimbursingItemsTransactionId").toBigInteger());
  }

  /**
   * <p>
   * Get a primary key for a Reimbursement based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>AssociationKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param receivablesOrderNumber Attribute that is part of the association key
   * @param reimbursingItemsOrderNumber Attribute that is part of the
   *          association key
   * @param receivablesTransactionId Attribute that is part of the association
   *          key
   * @param reimbursingItemsTransactionId Attribute that is part of the
   *          association key
   * @return a Reimbursement AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getReimbursementPrimaryKey(java.lang.Integer receivablesOrderNumber,
                                                       java.lang.Integer reimbursingItemsOrderNumber,
                                                       java.math.BigInteger receivablesTransactionId,
                                                       java.math.BigInteger reimbursingItemsTransactionId)
      throws InvalidParametersException {
    IPrimaryKey key = null;

    java.util.ArrayList<IPrimaryKey> list =
      new java.util.ArrayList<IPrimaryKey>();

    IPrimaryKey receivablesKey =
      getPrefixedItemPrimaryKey("receivables",
                                receivablesOrderNumber,
                                receivablesTransactionId);
    IPrimaryKey reimbursingItemsKey =
      getPrefixedItemPrimaryKey("reimbursingItems",
                                reimbursingItemsOrderNumber,
                                reimbursingItemsTransactionId);
    list.add(receivablesKey);
    list.add(reimbursingItemsKey);

    if (receivablesKey != null && reimbursingItemsKey != null) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list,
                                                                "com.poesys.accounting.db.transaction.Reimbursement");
    }
    return key;
  }

}