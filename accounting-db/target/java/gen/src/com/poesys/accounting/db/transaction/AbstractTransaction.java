/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.transaction;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the Transaction. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An exchange of value between accounts; the items that correspond to the fiscal
 * year accounts must balance (cancel each other out with respect to debits and
 * credits)
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTransaction extends AbstractDto implements ITransaction {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractTransaction.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractTransaction> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractTransaction>();

  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested items
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.transaction.sql.QueryItemsByTransaction
   */
  private class QueryItemsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.accounting.db.transaction.IItem, ITransaction, java.util.List<com.poesys.accounting.db.transaction.IItem>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryItemsSetter object.
     */
    public QueryItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ITransaction getParametersDto() {
      return AbstractTransaction.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.transaction.IItem, ITransaction> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItemsByTransaction();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
      // No status change; this is just filling in the object data.
      items = list;
      // Add the primary keys to the serialized key list if there are any.
      if (items != null) {
        if (itemsKeys != null) {
          itemsKeys.clear();
        } else {
          itemsKeys = new java.util.ArrayList<IPrimaryKey>();
        }
        for (com.poesys.db.dto.IDbDto object : items) {
          itemsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated items list is not null
      return items != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested items list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.transaction.sql.QueryItem
   */
  private class ReadItemsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.accounting.db.transaction.IItem> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadItemsSetter object to read the items list.
     */
    public ReadItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getObjectList() {
      return items;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return itemsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
      items = list;
    }
  }
  /**
   * Post-processing setter for post-processing nested to-many association items.
   */
  private class PostProcessItemsSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association items source: AddToManyChildCollectionProperties

    /**
     * Create an PostProcessItemsSetter object.
     */
    public PostProcessItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = items;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association items.
   *
   * @see com.poesys.accounting.db.transaction.sql.InsertItem
   */
  private class InsertItemsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association items source: AddToManyChildCollectionProperties

    /**
     * Create an InsertItemsSetter object.
     */
    public InsertItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = items;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added items and updated items.
   * Deleted items are deleted in the database cascade delete.
   */

  private class UpdateItemsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.transaction.IItem, java.util.List<com.poesys.accounting.db.transaction.IItem>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateItemsSetter object.
     */
    public UpdateItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected void doChanged(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      // items source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.transaction.IItem> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.transaction.sql.UpdateItem());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.transaction.IItem> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.transaction.sql.DeleteItem());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.transaction.IItem> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.transaction.sql.InsertItem());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getDtos() {
      return items;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.transaction.IItem object to items collection.
   * 
   * @param object the com.poesys.accounting.db.transaction.IItem object
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object) {
    if (items == null) {
      // Association not yet created, create it.
      items = new java.util.ArrayList<com.poesys.accounting.db.transaction.IItem>();
    }
    items.add(object);
    // Add the primary key to the primary key array.
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    itemsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Transaction for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractTransaction() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    readObjectSetters.add(new ReadItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
    postProcessSetters.add(new PostProcessItemsSetter());
  }

  /**
   * Create a Transaction. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Transaction
   * @param transactionId primary key attribute
   * @param description a text describing the nature of the transaction
   * @param transactionDate the calendar day on which the transaction occurred
   * @param checked whether the transaction is reconciled and validated
   * @param balance whether the transaction represents a balance transaction, the transfer of an
amount onto the balance sheet; balance transactions do not need to have
off-setting debits and credits and are ignored in balance checking for normal
transactions
   */
  public AbstractTransaction(IPrimaryKey key, java.math.BigInteger transactionId, java.lang.String description, java.sql.Timestamp transactionDate, java.lang.Boolean checked, java.lang.Boolean balance) {
    this.key = key;

    this.transactionId = transactionId;

    if (transactionId == null) {
      throw new com.poesys.db.InvalidParametersException("transactionId is required for " + key.getValueList());
    }
    
    this.description = description;

    if (description == null) {
      throw new com.poesys.db.InvalidParametersException("description is required for " + key.getValueList());
    }
    
    this.transactionDate = transactionDate;

    if (transactionDate == null) {
      throw new com.poesys.db.InvalidParametersException("transactionDate is required for " + key.getValueList());
    }
    
    this.checked = checked;

    if (checked == null) {
      throw new com.poesys.db.InvalidParametersException("checked is required for " + key.getValueList());
    }
    
    this.balance = balance;

    if (balance == null) {
      throw new com.poesys.db.InvalidParametersException("balance is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    readObjectSetters.add(new ReadItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
    postProcessSetters.add(new PostProcessItemsSetter());
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractTransaction");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    ITransaction other = (ITransaction)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    ITransaction other = (ITransaction)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.transaction";
  }

  @Override
  public void markChildrenDeleted() {
    // Only process deletes if child exists.
    if (items != null) {
      for (com.poesys.db.dto.IDbDto dto : items) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property transactionId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger transactionId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getTransactionId() {
    return transactionId;
  }

  /**
   * Clear the transactionId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTransactionId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the transactionId.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Primary key attribute
   * </p>
   *
   * @param transactionId the value with which to set the property
   */
  void setTransactionId(java.math.BigInteger transactionId)
      throws com.poesys.db.InvalidParametersException {
    if (transactionId == null) {
      throw new com.poesys.db.InvalidParametersException("transactionId is required");
    }
    
    this.transactionId = transactionId;
    setChanged();
  }
  /**
   * Nested property description
   *
   * <p>
   * a text describing the nature of the transaction
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String description;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Clear the description data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the description.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * a text describing the nature of the transaction
   * </p>
   *
   * @param description the value with which to set the property
   */
  public void setDescription(java.lang.String description)
      throws com.poesys.db.InvalidParametersException {
    if (description == null) {
      throw new com.poesys.db.InvalidParametersException("description is required");
    }
    
    this.description = description;
    setChanged();
  }
  /**
   * Nested property transactionDate
   *
   * <p>
   * the calendar day on which the transaction occurred
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.sql.Timestamp transactionDate;
  
  /**
   * Get an object of java.sql.Timestamp.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.sql.Timestamp
   */

  public java.sql.Timestamp getTransactionDate() {
    return transactionDate;
  }

  /**
   * Clear the transactionDate data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTransactionDate() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the transactionDate.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the calendar day on which the transaction occurred
   * </p>
   *
   * @param transactionDate the value with which to set the property
   */
  public void setTransactionDate(java.sql.Timestamp transactionDate)
      throws com.poesys.db.InvalidParametersException {
    if (transactionDate == null) {
      throw new com.poesys.db.InvalidParametersException("transactionDate is required");
    }
    
    this.transactionDate = transactionDate;
    setChanged();
  }
  /**
   * Nested property checked
   *
   * <p>
   * whether the transaction is reconciled and validated
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean checked;
  
  /**
   * Get an object of java.lang.Boolean.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Boolean
   */

  public java.lang.Boolean getChecked() {
    return checked;
  }

  /**
   * Clear the checked data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearChecked() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the checked.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether the transaction is reconciled and validated
   * </p>
   *
   * @param checked the value with which to set the property
   */
  public void setChecked(java.lang.Boolean checked)
      throws com.poesys.db.InvalidParametersException {
    if (checked == null) {
      throw new com.poesys.db.InvalidParametersException("checked is required");
    }
    
    this.checked = checked;
    setChanged();
  }
  /**
   * Nested property balance
   *
   * <p>
   * whether the transaction represents a balance transaction, the transfer of an
   * amount onto the balance sheet; balance transactions do not need to have
   * off-setting debits and credits and are ignored in balance checking for normal
   * transactions
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean balance;
  
  /**
   * Get an object of java.lang.Boolean.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Boolean
   */

  public java.lang.Boolean getBalance() {
    return balance;
  }

  /**
   * Clear the balance data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearBalance() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the balance.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether the transaction represents a balance transaction, the transfer of an
   * amount onto the balance sheet; balance transactions do not need to have
   * off-setting debits and credits and are ignored in balance checking for normal
   * transactions
   * </p>
   *
   * @param balance the value with which to set the property
   */
  public void setBalance(java.lang.Boolean balance)
      throws com.poesys.db.InvalidParametersException {
    if (balance == null) {
      throw new com.poesys.db.InvalidParametersException("balance is required");
    }
    
    this.balance = balance;
    setChanged();
  }
  /**
   * Nested property items
   *
   * <p>
   * the set of items belonging to the transaction; the debit and credit values must
   * cancel each other out by summing to zero
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.accounting.db.transaction.IItem> items;
  // Ordered list of keys of the objects in the items list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> itemsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.accounting.db.transaction.IItem.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem>
   */

  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems() {
    return items;
  }

  /**
   * Clear the items data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearItems() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the items.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of items belonging to the transaction; the debit and credit values must
   * cancel each other out by summing to zero
   * </p>
   *
   * @param items the value with which to set the property
   */
  public void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items)
      throws com.poesys.db.InvalidParametersException {
    if (items == null) {
      throw new com.poesys.db.InvalidParametersException("items is required");
    }
    
    this.items = items;
    // Add the primary keys of the new collection to the serialized key list.
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (items != null) {
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : items) {
        itemsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {

    // Clean up items.
    if (subject != null && subject instanceof com.poesys.accounting.db.transaction.IItem && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        items != null) {
      // Delete to-many items child from collection
      items.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the Transaction and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.ITransaction> transactionFactory =
      manager.getFactory("com.poesys.accounting.db.transaction.Transaction",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ITransaction> sql =
      new com.poesys.accounting.db.transaction.sql.InsertTransaction();
    com.poesys.db.dao.insert.IInsert<ITransaction> inserter =
      transactionFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}