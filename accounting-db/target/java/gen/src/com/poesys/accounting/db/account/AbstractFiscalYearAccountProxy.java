/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * FiscalYearAccount. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An account during a particular accounting period; a chart of accounts for an
 * accounting period consists of all the accounts that are current and active
 * during the specific accounting period
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractFiscalYearAccountProxy extends AbstractLazyLoadingDtoProxy implements IFiscalYearAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractFiscalYearAccountProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractFiscalYearAccountProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractFiscalYearAccountProxy>();

  // Lazy-loading/deserialization query setter strategy nested classes for 
  // single-object associations
  
  /** Flag indicating whether the fiscalYear property has been loaded */
  private transient boolean fiscalYearLoaded = false;
  
  /**
   * Query setter for lazily querying nested fiscalYear object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryFiscalYear
   */
  private class QueryFiscalYearSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.account.IFiscalYear> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryFiscalYearSetter object.
     */
    public QueryFiscalYearSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.account.IFiscalYear primary key with the value 
      // from the com.poesys.accounting.db.account.IFiscalYearAccount object
      return com.poesys.accounting.db.account.AccountFactory.getFiscalYearPrimaryKey(((IFiscalYearAccount)dto).getYear());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IFiscalYear> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryFiscalYear();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.IFiscalYear dto) {
      setFiscalYear(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded fiscalYear
      return fiscalYearLoaded;
    }
  }

  /** Flag indicating whether the account property has been loaded */
  private transient boolean accountLoaded = false;
  
  /**
   * Query setter for lazily querying nested account object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccount
   */
  private class QueryAccountSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.account.IAccount> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryAccountSetter object.
     */
    public QueryAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.account.IAccount primary key with the value 
      // from the com.poesys.accounting.db.account.IFiscalYearAccount object
      return com.poesys.accounting.db.account.AccountFactory.getAccountPrimaryKey(((IFiscalYearAccount)dto).getAccountName(), ((IFiscalYearAccount)dto).getEntityName());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccount();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.IAccount dto) {
      setAccount(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded account
      return accountLoaded;
    }
  }

  /**
   * Query setter for lazily querying nested group object
   * (object property)
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccountGroup
   */
  private class QueryGroupSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.account.IAccountGroup> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryGroupSetter object.
     */
    public QueryGroupSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.account.IAccountGroup primary key with the value 
      // from the com.poesys.accounting.db.account.IFiscalYearAccount object
      return com.poesys.accounting.db.account.AccountFactory.getAccountGroupPrimaryKey(((IFiscalYearAccount)dto).getAccountType(), ((IFiscalYearAccount)dto).getGroupName());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IAccountGroup> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccountGroup();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.IAccountGroup dto) {
      setGroup(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxied DTO group exists
      return (((FiscalYearAccount)dto).getGroup() != null);
    }
  }

  /**
   * Create a FiscalYearAccountProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractFiscalYearAccountProxy(FiscalYearAccount dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();

    // Add query setters for single-object deserialization.
    readObjectSetters.add(new QueryFiscalYearSetter());
    readObjectSetters.add(new QueryAccountSetter());
    readObjectSetters.add(new QueryGroupSetter());
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractFiscalYearAccountProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractFiscalYearAccountProxy otherProxy = (AbstractFiscalYearAccountProxy)obj;
    return ((FiscalYearAccount)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((FiscalYearAccount)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getAccountOrderNumber() {
    return ((FiscalYearAccount)dto).getAccountOrderNumber();
  }

  /**
   * Set the accountOrderNumber from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param accountOrderNumber the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setAccountOrderNumber(java.lang.Integer accountOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setAccountOrderNumber(accountOrderNumber);
  }

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getGroupOrderNumber() {
    return ((FiscalYearAccount)dto).getGroupOrderNumber();
  }

  /**
   * Set the groupOrderNumber from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param groupOrderNumber the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setGroupOrderNumber(java.lang.Integer groupOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setGroupOrderNumber(groupOrderNumber);
  }

  /**
   * Get an object of com.poesys.accounting.db.account.IAccountGroup
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.accounting.db.account.IAccountGroup
   */
  public com.poesys.accounting.db.account.IAccountGroup getGroup() {
    return ((FiscalYearAccount)dto).getGroup();
  }

  /**
   * Set the group from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param group the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setGroup(com.poesys.accounting.db.account.IAccountGroup group)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setGroup(group);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getAccountType() {
    return ((FiscalYearAccount)dto).getAccountType();
  }

  /**
   * Set the accountType from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param accountType the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setAccountType(java.lang.String accountType)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setAccountType(accountType);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getGroupName() {
    return ((FiscalYearAccount)dto).getGroupName();
  }

  /**
   * Set the groupName from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param groupName the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setGroupName(java.lang.String groupName)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setGroupName(groupName);
  }

  /**
   * Get an object of com.poesys.accounting.db.account.IFiscalYear
   * loading the fiscalYear association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a com.poesys.accounting.db.account.IFiscalYear
   */
  public com.poesys.accounting.db.account.IFiscalYear getFiscalYear() {
    // Lazy-load the local property fiscalYear if not loaded and the key years is not null.
    if (!fiscalYearLoaded && ((IFiscalYearAccount)dto).getYear() != null) {
      com.poesys.db.dto.ISet setter = new QueryFiscalYearSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      fiscalYearLoaded = true;
    } else if (!fiscalYearLoaded) {
      // years key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("years");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((FiscalYearAccount)dto).getFiscalYear();
  }


  /**
   * Clear the lazily loaded property fiscalYear if it is loaded.
   */
  public void clearFiscalYear() {
    // Only clear if loaded already.
    if (fiscalYearLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((FiscalYearAccount)dto).setFiscalYear(null);
        ((FiscalYearAccount)dto).undoStatus();
        fiscalYearLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the fiscalYear from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param fiscalYear the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setFiscalYear(com.poesys.accounting.db.account.IFiscalYear fiscalYear)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setFiscalYear(fiscalYear);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    fiscalYearLoaded = true;
  }

  /**
   * Get an object of com.poesys.accounting.db.account.IAccount
   * loading the account association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a com.poesys.accounting.db.account.IAccount
   */
  public com.poesys.accounting.db.account.IAccount getAccount() {
    // Lazy-load the local property account if not loaded and the key accounts is not null.
    if (!accountLoaded && ((IFiscalYearAccount)dto).getAccountName() != null && ((IFiscalYearAccount)dto).getEntityName() != null) {
      com.poesys.db.dto.ISet setter = new QueryAccountSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      accountLoaded = true;
    } else if (!accountLoaded) {
      // accounts key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("accounts");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((FiscalYearAccount)dto).getAccount();
  }


  /**
   * Clear the lazily loaded property account if it is loaded.
   */
  public void clearAccount() {
    // Only clear if loaded already.
    if (accountLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((FiscalYearAccount)dto).setAccount(null);
        ((FiscalYearAccount)dto).undoStatus();
        accountLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the account from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param account the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setAccount(com.poesys.accounting.db.account.IAccount account)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setAccount(account);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    accountLoaded = true;
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getAccountName() {
    return ((FiscalYearAccount)dto).getAccountName();
  }

  /**
   * Set the accountName from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param accountName the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setAccountName(java.lang.String accountName)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setAccountName(accountName);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getEntityName() {
    return ((FiscalYearAccount)dto).getEntityName();
  }

  /**
   * Set the entityName from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param entityName the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setEntityName(java.lang.String entityName)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setEntityName(entityName);
  }

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getYear() {
    return ((FiscalYearAccount)dto).getYear();
  }

  /**
   * Set the year from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param year the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setYear(java.lang.Integer year)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYearAccount)dto).setYear(year);
  }

  public void markChildrenDeleted() {
  	((FiscalYearAccount)dto).markChildrenDeleted();
  }
}