/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the FiscalYearAccount. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An account during a particular accounting period; a chart of accounts for an
 * accounting period consists of all the accounts that are current and active
 * during the specific accounting period
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractFiscalYearAccount extends AbstractDto implements IFiscalYearAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractFiscalYearAccount.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractFiscalYearAccount> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractFiscalYearAccount>();

  // Setter strategy nested classes for single-object associations
  
  /**
   * Post-process setter for post-processing nested object property fiscalYear.
   */
  private class PostProcessFiscalYearSetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property fiscalYear source: AddAssociationKeyObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessFiscalYearSetter object.
     */
    public PostProcessFiscalYearSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (fiscalYear != null) {
        array.add(fiscalYear);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }


  /**
   * Post-process setter for post-processing nested object property account.
   */
  private class PostProcessAccountSetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property account source: AddAssociationKeyObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessAccountSetter object.
     */
    public PostProcessAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (account != null) {
        array.add(account);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }



  /**
   * Create an empty FiscalYearAccount for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractFiscalYearAccount() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the fiscalYear property.
    postProcessSetters.add(new PostProcessFiscalYearSetter());

    // Add the setters for the account property.
    postProcessSetters.add(new PostProcessAccountSetter());
  }

  /**
   * Create a FiscalYearAccount. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the FiscalYearAccount
   * @param accountsObject wraps an associated IAccount object
   * @param yearsObject wraps an associated IFiscalYear object
   * @param accountName Attribute that is part of the association key
   * @param entityName Attribute that is part of the association key
   * @param year Attribute that is part of the association key
   * @param orderNumber the integer rank of the account in the list of accounts
   */
  public AbstractFiscalYearAccount(IPrimaryKey key, com.poesys.accounting.db.account.IAccount accountsObject, com.poesys.accounting.db.account.IFiscalYear yearsObject, java.lang.String accountName, java.lang.String entityName, java.lang.Integer year, java.lang.Integer orderNumber) {
    this.key = key;

    this.accountName = accountName;

    if (accountName == null) {
      throw new com.poesys.db.InvalidParametersException("accountName is required for " + key.getValueList());
    }
    
    this.entityName = entityName;

    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required for " + key.getValueList());
    }
    
    this.year = year;

    if (year == null) {
      throw new com.poesys.db.InvalidParametersException("year is required for " + key.getValueList());
    }
    
    this.orderNumber = orderNumber;

    // Associated key object
    account = accountsObject;
    
    // Associated key object
    fiscalYear = yearsObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the fiscalYear property.
    postProcessSetters.add(new PostProcessFiscalYearSetter());
    
    
    // Add the setters for the account property.
    postProcessSetters.add(new PostProcessAccountSetter());
    
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractFiscalYearAccount");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    IFiscalYearAccount other = (IFiscalYearAccount)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IFiscalYearAccount other = (IFiscalYearAccount)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.account";
  }

  @Override
  public void markChildrenDeleted() {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property orderNumber
   *
   * <p>
   * the integer rank of the account in the list of accounts
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Integer orderNumber;
  
  /**
   * Get an object of java.lang.Integer.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Integer
   */

  public java.lang.Integer getOrderNumber() {
    return orderNumber;
  }

  /**
   * Clear the orderNumber data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearOrderNumber() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the orderNumber.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the integer rank of the account in the list of accounts
   * </p>
   *
   * @param orderNumber the value with which to set the property
   */
  public  void setOrderNumber(java.lang.Integer orderNumber) {
    this.orderNumber = orderNumber;
    setChanged();
  }
  /**
   * Nested property fiscalYear
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private com.poesys.accounting.db.account.IFiscalYear fiscalYear;
  
  /**
   * Get an object of com.poesys.accounting.db.account.IFiscalYear.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.accounting.db.account.IFiscalYear
   */

  public com.poesys.accounting.db.account.IFiscalYear getFiscalYear() {
    return fiscalYear;
  }

  /**
   * Clear the fiscalYear data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearFiscalYear() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the fiscalYear.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Associated object
   * </p>
   *
   * @param fiscalYear the value with which to set the property
   */
  void setFiscalYear(com.poesys.accounting.db.account.IFiscalYear fiscalYear)
      throws com.poesys.db.InvalidParametersException {
    if (fiscalYear == null) {
      throw new com.poesys.db.InvalidParametersException("fiscalYear is required");
    }
    
    this.fiscalYear = fiscalYear;
    setChanged();
  }
  /**
   * Nested property account
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private com.poesys.accounting.db.account.IAccount account;
  
  /**
   * Get an object of com.poesys.accounting.db.account.IAccount.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a com.poesys.accounting.db.account.IAccount
   */

  public com.poesys.accounting.db.account.IAccount getAccount() {
    return account;
  }

  /**
   * Clear the account data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccount() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the account.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: true</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Associated object
   * </p>
   *
   * @param account the value with which to set the property
   */
  void setAccount(com.poesys.accounting.db.account.IAccount account)
      throws com.poesys.db.InvalidParametersException {
    if (account == null) {
      throw new com.poesys.db.InvalidParametersException("account is required");
    }
    
    this.account = account;
    setChanged();
  }
  /**
   * Nested property accountName
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accountName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getAccountName() {
    return accountName;
  }

  /**
   * Clear the accountName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccountName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accountName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param accountName the value with which to set the property
   */
  void setAccountName(java.lang.String accountName)
      throws com.poesys.db.InvalidParametersException {
    if (accountName == null) {
      throw new com.poesys.db.InvalidParametersException("accountName is required");
    }
    
    this.accountName = accountName;
    setChanged();
  }
  /**
   * Nested property entityName
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String entityName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getEntityName() {
    return entityName;
  }

  /**
   * Clear the entityName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEntityName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the entityName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param entityName the value with which to set the property
   */
  void setEntityName(java.lang.String entityName)
      throws com.poesys.db.InvalidParametersException {
    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required");
    }
    
    this.entityName = entityName;
    setChanged();
  }
  /**
   * Nested property year
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.Integer year;
  
  /**
   * Get an object of java.lang.Integer.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.Integer
   */

  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Clear the year data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearYear() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the year.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * @param year the value with which to set the property
   */
  void setYear(java.lang.Integer year)
      throws com.poesys.db.InvalidParametersException {
    if (year == null) {
      throw new com.poesys.db.InvalidParametersException("year is required");
    }
    
    this.year = year;
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {
  }

  /**
   * Create the inserters for the FiscalYearAccount and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccountFactory =
      manager.getFactory("com.poesys.accounting.db.account.FiscalYearAccount",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IFiscalYearAccount> sql =
      new com.poesys.accounting.db.account.sql.InsertFiscalYearAccount();
    com.poesys.db.dao.insert.IInsert<IFiscalYearAccount> inserter =
      fiscalYearAccountFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}