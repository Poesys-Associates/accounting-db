/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the AccountType. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A named group of account groups, grouping accounts within basic accounting types
 * for a fiscal year. The types are fixed and include: Assets, Liabilities, Equity,
 * Income, and Expense.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccountType extends AbstractDto implements IAccountType {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractAccountType.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractAccountType> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractAccountType>();

  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested groups
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryGroupsByAccountType
   */
  private class QueryGroupsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.accounting.db.account.IAccountGroup, IAccountType, java.util.List<com.poesys.accounting.db.account.IAccountGroup>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryGroupsSetter object.
     */
    public QueryGroupsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAccountType getParametersDto() {
      return AbstractAccountType.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IAccountGroup, IAccountType> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryGroupsByAccountType();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.account.IAccountGroup> list) {
      // No status change; this is just filling in the object data.
      groups = list;
      // Add the primary keys to the serialized key list if there are any.
      if (groups != null) {
        if (groupsKeys != null) {
          groupsKeys.clear();
        } else {
          groupsKeys = new java.util.ArrayList<IPrimaryKey>();
        }
        for (com.poesys.db.dto.IDbDto object : groups) {
          groupsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated groups list is not null
      return groups != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested groups list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccountGroup
   */
  private class ReadGroupsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.accounting.db.account.IAccountGroup> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadGroupsSetter object to read the groups list.
     */
    public ReadGroupsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.account.IAccountGroup> getObjectList() {
      return groups;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return groupsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IAccountGroup> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccountGroup();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.account.IAccountGroup> list) {
      groups = list;
    }
  }
  /**
   * Post-processing setter for post-processing nested to-many association groups.
   */
  private class PostProcessGroupsSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association groups source: AddToManyChildCollectionProperties

    /**
     * Create an PostProcessGroupsSetter object.
     */
    public PostProcessGroupsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = groups;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association groups.
   *
   * @see com.poesys.accounting.db.account.sql.InsertAccountGroup
   */
  private class InsertGroupsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association groups source: AddToManyChildCollectionProperties

    /**
     * Create an InsertGroupsSetter object.
     */
    public InsertGroupsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = groups;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added groups and updated groups.
   * Deleted groups are deleted in the database cascade delete.
   */

  private class UpdateGroupsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.account.IAccountGroup, java.util.List<com.poesys.accounting.db.account.IAccountGroup>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateGroupsSetter object.
     */
    public UpdateGroupsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(java.util.List<com.poesys.accounting.db.account.IAccountGroup> dtos) {
      // groups source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccountGroup> factory = 
        manager.getFactory(com.poesys.accounting.db.account.AccountGroup.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.account.IAccountGroup> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.account.sql.UpdateAccountGroup());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.List<com.poesys.accounting.db.account.IAccountGroup> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccountGroup> factory = 
        manager.getFactory(com.poesys.accounting.db.account.AccountGroup.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.account.IAccountGroup> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.account.sql.DeleteAccountGroup());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.List<com.poesys.accounting.db.account.IAccountGroup> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccountGroup> factory = 
        manager.getFactory(com.poesys.accounting.db.account.AccountGroup.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.account.IAccountGroup> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.account.sql.InsertAccountGroup());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.account.IAccountGroup> getDtos() {
      return groups;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.AccountGroup.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.account.IAccountGroup object to groups collection.
   * 
   * @param object the com.poesys.accounting.db.account.IAccountGroup object
   */
  public void addGroupsAccountGroup(com.poesys.accounting.db.account.IAccountGroup object) {
    if (groups == null) {
      // Association not yet created, create it.
      groups = new java.util.ArrayList<com.poesys.accounting.db.account.IAccountGroup>();
    }
    groups.add(object);
    // Add the primary key to the primary key array.
    if (groupsKeys != null) {
      groupsKeys.clear();
    } else {
      groupsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    groupsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty AccountType for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAccountType() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the groups property.
    querySetters.add(new QueryGroupsSetter());
    readObjectSetters.add(new ReadGroupsSetter());
    insertSetters.add(new InsertGroupsSetter());
    postSetters.add(new UpdateGroupsSetter());
    postProcessSetters.add(new PostProcessGroupsSetter());
  }

  /**
   * Create a AccountType. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the AccountType
   * @param accountType the account type name (Assets, Liabilities, Equity, Income, Expense)
   */
  public AbstractAccountType(IPrimaryKey key, java.lang.String accountType) {
    this.key = key;

    this.accountType = accountType;

    if (accountType == null) {
      throw new com.poesys.db.InvalidParametersException("accountType is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the groups property.
    querySetters.add(new QueryGroupsSetter());
    readObjectSetters.add(new ReadGroupsSetter());
    insertSetters.add(new InsertGroupsSetter());
    postSetters.add(new UpdateGroupsSetter());
    postProcessSetters.add(new PostProcessGroupsSetter());
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractAccountType");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    IAccountType other = (IAccountType)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IAccountType other = (IAccountType)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.account";
  }

  @Override
  public void markChildrenDeleted() {
    // Only process deletes if child exists.
    if (groups != null) {
      for (com.poesys.db.dto.IDbDto dto : groups) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property accountType
   *
   * <p>
   * the account type name (Assets, Liabilities, Equity, Income, Expense)
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accountType;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getAccountType() {
    return accountType;
  }

  /**
   * Clear the accountType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccountType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accountType.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the account type name (Assets, Liabilities, Equity, Income, Expense)
   * </p>
   *
   * @param accountType the value with which to set the property
   */
  void setAccountType(java.lang.String accountType)
      throws com.poesys.db.InvalidParametersException {
    if (accountType == null) {
      throw new com.poesys.db.InvalidParametersException("accountType is required");
    }
    
    this.accountType = accountType;
    setChanged();
  }
  /**
   * Nested property groups
   *
   * 
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.accounting.db.account.IAccountGroup> groups;
  // Ordered list of keys of the objects in the groups list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> groupsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.accounting.db.account.IAccountGroup.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.List<com.poesys.accounting.db.account.IAccountGroup>
   */

  public java.util.List<com.poesys.accounting.db.account.IAccountGroup> getGroups() {
    return groups;
  }

  /**
   * Clear the groups data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearGroups() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the groups.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param groups the value with which to set the property
   */
  public void setGroups(java.util.List<com.poesys.accounting.db.account.IAccountGroup> groups)
      throws com.poesys.db.InvalidParametersException {
    if (groups == null) {
      throw new com.poesys.db.InvalidParametersException("groups is required");
    }
    
    this.groups = groups;
    // Add the primary keys of the new collection to the serialized key list.
    if (groupsKeys != null) {
      groupsKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      groupsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (groups != null) {
    if (groupsKeys != null) {
      groupsKeys.clear();
    } else {
      groupsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : groups) {
        groupsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {

    // Clean up groups.
    if (subject != null && subject instanceof com.poesys.accounting.db.account.IAccountGroup && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        groups != null) {
      // Delete to-many groups child from collection
      groups.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the AccountType and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccountType> accountTypeFactory =
      manager.getFactory("com.poesys.accounting.db.account.AccountType",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IAccountType> sql =
      new com.poesys.accounting.db.account.sql.InsertAccountType();
    com.poesys.db.dao.insert.IInsert<IAccountType> inserter =
      accountTypeFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}