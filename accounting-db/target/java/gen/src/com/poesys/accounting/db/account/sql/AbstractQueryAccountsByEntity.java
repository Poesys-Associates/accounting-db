/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedOneToManyObjects.vsl

package com.poesys.accounting.db.account.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * Account objects using the primary key of an associated 
 * Entity object through the association Accounts. This
 * is a many-to-one association from Account to Entity.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * Account objects from the database using the foreign key type
 * Entity.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAccountsByEntity 
    implements IParameterizedQuerySql<com.poesys.accounting.db.account.IAccount, com.poesys.accounting.db.account.IEntity> {
  /** SQL query statement for Account */
  private static final String SQL =
    "SELECT Account.entityName, Account.accountName, Account.description, Account.debitDefault, Account.active, CapitalAccount.ownership, CapitalAccount.capitalEntityName, DistributionAccount.capitalEntityName, SimpleAccount.receivable, CASE WHEN CapitalAccount.accountName IS NOT NULL THEN 'CapitalAccount' WHEN CapitalAccount.entityName IS NOT NULL THEN 'CapitalAccount' WHEN DistributionAccount.accountName IS NOT NULL THEN 'DistributionAccount' WHEN DistributionAccount.entityName IS NOT NULL THEN 'DistributionAccount' WHEN SimpleAccount.accountName IS NOT NULL THEN 'SimpleAccount' WHEN SimpleAccount.entityName IS NOT NULL THEN 'SimpleAccount' ELSE NULL END AS discriminant FROM Account LEFT OUTER JOIN CapitalAccount CapitalAccount ON Account.accountName = CapitalAccount.accountName AND Account.entityName = CapitalAccount.entityName LEFT OUTER JOIN DistributionAccount DistributionAccount ON Account.accountName = DistributionAccount.accountName AND Account.entityName = DistributionAccount.entityName LEFT OUTER JOIN SimpleAccount SimpleAccount ON Account.accountName = SimpleAccount.accountName AND Account.entityName = SimpleAccount.entityName WHERE Account.entityName = ?";

  @Override
  public void bindParameters(PreparedStatement stmt, com.poesys.accounting.db.account.IEntity parameters) {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  @Override
  public String getParameterValues(com.poesys.accounting.db.account.IEntity parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  @Override
  public com.poesys.accounting.db.account.IAccount getData(ResultSet rs) {
    try {
      return com.poesys.accounting.db.account.AccountFactory.getAccountData(getPrimaryKey(rs), rs);
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting data", e);
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey(ResultSet rs) {
    try {
      return com.poesys.accounting.db.account.AccountFactory.getAccountPrimaryKey(rs, "");
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting primary key", e);
    }
  }

  @Override
  public String getSql() {
    return SQL;
  }
}