/* Copyright 2016 Poesys Associates. All rights reserved. */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package com.poesys.accounting.db.transaction;

import com.poesys.accounting.db.transaction.json.JsonTransaction;
import com.poesys.db.dto.IDbDto;
import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer-object interface for the Transaction.
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * An exchange of value between accounts; the items that correspond to the fiscal
 * year accounts must balance (cancel each other out with respect to debits and
 * credits)
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 * <li>Persistent</li>
 * <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public interface ITransaction extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   */
  void markChildrenDeleted();

  IPrimaryKey getPrimaryKey();

  /**
   * Get a JSON DTO for the Reimbursement.
   *
   * @return a JSON DTO
   */
  JsonTransaction getJson();

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: ${property.prefix}
   * </p>
   *
   * @return a java.math.BigInteger transactionId
   */
  java.math.BigInteger getTransactionId();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not true
  // Read/Write property: false

  /**
   * <p>
   * a text describing the nature of the transaction
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: description
   * </p>
   *
   * @return a java.lang.String description
   */
  java.lang.String getDescription();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not false
  // Read/Write property: true

  /**
   * <p>
   * Set the description.
   * </p>
   *
   * @param description the value to set into the description
   * @throws com.poesys.db.InvalidParametersException when the description
   *                                                  value is null
   * @throws com.poesys.db.dto.DtoStatusException     when the status cannot be set to CHANGED
   */
  void setDescription(java.lang.String description) throws com.poesys.db.InvalidParametersException;

  /**
   * <p>
   * the calendar day on which the transaction occurred
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: transactionDate
   * </p>
   *
   * @return a java.sql.Timestamp transactionDate
   */
  java.sql.Timestamp getTransactionDate();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not false
  // Read/Write property: true

  /**
   * <p>
   * Set the transactionDate.
   * </p>
   *
   * @param transactionDate the value to set into the transactionDate
   * @throws com.poesys.db.InvalidParametersException when the transactionDate
   *                                                  value is null
   * @throws com.poesys.db.dto.DtoStatusException     when the status cannot be set to CHANGED
   */
  void setTransactionDate(java.sql.Timestamp transactionDate) throws com.poesys.db
    .InvalidParametersException;

  /**
   * <p>
   * whether the transaction is reconciled and validated
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: checked
   * </p>
   *
   * @return a java.lang.Boolean checked
   */
  java.lang.Boolean getChecked();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not false
  // Read/Write property: true

  /**
   * <p>
   * Set the checked.
   * </p>
   *
   * @param checked the value to set into the checked
   * @throws com.poesys.db.InvalidParametersException when the checked
   *                                                  value is null
   * @throws com.poesys.db.dto.DtoStatusException     when the status cannot be set to CHANGED
   */
  void setChecked(java.lang.Boolean checked) throws com.poesys.db.InvalidParametersException;

  /**
   * <p>
   * whether the transaction represents a balance transaction, the transfer of an
   * amount onto the balance sheet; balance transactions do not need to have
   * off-setting debits and credits and are ignored in balance checking for normal
   * transactions
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: balance
   * </p>
   *
   * @return a java.lang.Boolean balance
   */
  java.lang.Boolean getBalance();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not false
  // Read/Write property: true

  /**
   * <p>
   * Set the balance.
   * </p>
   *
   * @param balance the value to set into the balance
   * @throws com.poesys.db.InvalidParametersException when the balance
   *                                                  value is null
   * @throws com.poesys.db.dto.DtoStatusException     when the status cannot be set to CHANGED
   */
  void setBalance(java.lang.Boolean balance) throws com.poesys.db.InvalidParametersException;

  /**
   * <p>
   * the set of items belonging to the transaction; the debit and credit values must
   * cancel each other out by summing to zero
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: Item
   * Owning package: com.poesys.accounting.db.transaction
   * Property prefix: items
   * </p>
   *
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem> items
   */
  java.util.List<com.poesys.accounting.db.transaction.IItem> getItems();
  // Setter here if the four conditions below are all true or not false
  // Read/Write DTO: true
  // Mutable DTO: not false
  // Mutable property: not false
  // Read/Write property: true

  /**
   * <p>
   * Set the items.
   * </p>
   *
   * @param items the value to set into the items
   * @throws com.poesys.db.InvalidParametersException when the items
   *                                                  value is null
   * @throws com.poesys.db.dto.DtoStatusException     when the status cannot be set to CHANGED
   */
  void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items) throws com
    .poesys.db.InvalidParametersException;

  /**
   * Add a Item object to the items collection.
   *
   * @param object the object to add to the collection
   */
  void addItemsItem(com.poesys.accounting.db.transaction.IItem object);
}