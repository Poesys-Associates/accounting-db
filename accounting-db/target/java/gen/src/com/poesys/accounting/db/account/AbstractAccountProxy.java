/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Account. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A division of the accounting system representing an individual accounting
 * element; divided into assets, liabilities, and equity on the balance sheet or
 * income or expense on the income statement; owned by an accounting entity
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccountProxy extends AbstractLazyLoadingDtoProxy implements IAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractAccountProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractAccountProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractAccountProxy>();

  // Lazy-loading/deserialization query setter strategy nested classes for 
  // single-object associations
  
  /**
   * Query setter for lazily querying nested entity object
   * (object property)
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryEntity
   */
  private class QueryEntitySetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.account.IEntity> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryEntitySetter object.
     */
    public QueryEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Entity.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.account.IEntity primary key with the value 
      // from the com.poesys.accounting.db.account.IAccount object
      return com.poesys.accounting.db.account.AccountFactory.getEntityPrimaryKey(((IAccount)dto).getEntityName());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IEntity> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryEntity();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.IEntity dto) {
      setEntity(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxied DTO entity exists
      return (((Account)dto).getEntity() != null);
    }
  }

    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the years property has been loaded */
  transient boolean yearsLoaded = false;

  /**
   * Query setter for lazily querying nested years collection
   * (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryYearsByAccount
   */
  private class QueryYearsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IFiscalYear, IAccount, java.util.Collection<com.poesys.accounting.db.account.IFiscalYear>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 100;

    /**
     * Create a QueryYearsSetter object.
     */
    public QueryYearsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAccount getParametersDto() {
      return AbstractAccountProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYear, IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryYearsByAccount();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IFiscalYear child : collection) {
          child.attach(AbstractAccountProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractAccountProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setFiscalYear(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded years
      return yearsLoaded;
    }
  }


  /**
   * Add a com.poesys.accounting.db.account.IFiscalYear object to the Years collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYear object to add to the collection
   */
  public void addYearsFiscalYear(com.poesys.accounting.db.account.IFiscalYear object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!yearsLoaded) {
      getYears();
    }
    ((Account)dto).addYearsFiscalYear(object);
  }



  /**
   * Read-Object setter for de-serializing nested items list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryItem
   */
  private class ReadItemsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.accounting.db.transaction.IItem> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadItemsSetter object to read the items list.
     */
    public ReadItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getObjectList() {
      java.util.List<com.poesys.accounting.db.transaction.IItem> items =  ((com.poesys.accounting.db.account.Account)dto).getItems();
      return items;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.accounting.db.account.Account)dto).itemsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
       setItems(list);
    }
  }

  /**
   * Add a com.poesys.accounting.db.transaction.IItem object to the Items collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.transaction.IItem object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object) {
    ((Account)dto).addItemsItem(object);
  }

  

  /** Flag indicating whether the fiscalYearAccount property has been loaded */
  transient boolean fiscalYearAccountLoaded = false;

  /**
   * Query setter for lazily querying nested fiscalYearAccount collection
   * (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByAccount
   */
  private class QueryFiscalYearAccountSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IFiscalYearAccount, IAccount, java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryFiscalYearAccountSetter object.
     */
    public QueryFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAccount getParametersDto() {
      return AbstractAccountProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYearAccount, IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByAccount();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IFiscalYearAccount child : collection) {
          child.attach(AbstractAccountProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractAccountProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setFiscalYearAccount(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded fiscalYearAccount
      return fiscalYearAccountLoaded;
    }
  }


  /**
   * Add a com.poesys.accounting.db.account.IFiscalYearAccount object to the FiscalYearAccount collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYearAccount object to add to the collection
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!fiscalYearAccountLoaded) {
      getFiscalYearAccount();
    }
    ((Account)dto).addFiscalYearAccountFiscalYearAccount(object);
  }

  /**
   * Create a AccountProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractAccountProxy(Account dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadItemsSetter());

    // Add query setters for single-object deserialization.
    readObjectSetters.add(new QueryEntitySetter());
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractAccountProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractAccountProxy otherProxy = (AbstractAccountProxy)obj;
    return ((Account)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Account)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.String
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getEntityName() {
    return ((Account)dto).getEntityName();
  }

  /**
   * Set the entityName from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param entityName the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setEntityName(java.lang.String entityName)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setEntityName(entityName);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getAccountName() {
    return ((Account)dto).getAccountName();
  }

  /**
   * Set the accountName from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param accountName the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setAccountName(java.lang.String accountName)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setAccountName(accountName);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getDescription() {
    return ((Account)dto).getDescription();
  }

  /**
   * Set the description from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param description the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDescription(java.lang.String description)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setDescription(description);
  }

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getDebitDefault() {
    return ((Account)dto).getDebitDefault();
  }

  /**
   * Set the debitDefault from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param debitDefault the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDebitDefault(java.lang.Boolean debitDefault)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setDebitDefault(debitDefault);
  }

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getActive() {
    return ((Account)dto).getActive();
  }

  /**
   * Set the active from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param active the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setActive(java.lang.Boolean active)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setActive(active);
  }

  /**
   * Get an object of com.poesys.accounting.db.account.IEntity
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * Lazy: false
   * 
   * @return a com.poesys.accounting.db.account.IEntity
   */
  public com.poesys.accounting.db.account.IEntity getEntity() {
    return ((Account)dto).getEntity();
  }

  /**
   * Set the entity from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param entity the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setEntity(com.poesys.accounting.db.account.IEntity entity)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setEntity(entity);
  }

  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYear
   * loading the years association if it is not already in memory.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYear>
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> getYears() {
    // Lazy-load the local property years if not loaded.
    if (!yearsLoaded) {
      com.poesys.db.dto.ISet setter = new QueryYearsSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      yearsLoaded = true;
    }
    return ((Account)dto).getYears();
  }


  /**
   * Clear the lazily loaded property years if it is loaded.
   */
  public void clearYears() {
    // Only clear if loaded already.
    if (yearsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Account)dto).setFiscalYear(null);
        ((Account)dto).undoStatus();
        yearsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the years from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param years the lazily loaded value to assign
   */
  public void setFiscalYear(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years)
      {
    ((Account)dto).setFiscalYear(years);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    yearsLoaded = true;
  }

  /**
   * Get a list of com.poesys.accounting.db.transaction.IItem
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem>
   */
  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems() {
    return ((Account)dto).getItems();
  }

  /**
   * Set the items from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param items the lazily loaded value to assign
   */
  public void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items)
      {
    ((Account)dto).setItems(items);
  }

  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYearAccount
   * loading the fiscalYearAccount association if it is not already in memory.
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount() {
    // Lazy-load the local property fiscalYearAccount if not loaded.
    if (!fiscalYearAccountLoaded) {
      com.poesys.db.dto.ISet setter = new QueryFiscalYearAccountSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      fiscalYearAccountLoaded = true;
    }
    return ((Account)dto).getFiscalYearAccount();
  }


  /**
   * Clear the lazily loaded property fiscalYearAccount if it is loaded.
   */
  public void clearFiscalYearAccount() {
    // Only clear if loaded already.
    if (fiscalYearAccountLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Account)dto).setFiscalYearAccount(null);
        ((Account)dto).undoStatus();
        fiscalYearAccountLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the fiscalYearAccount from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param fiscalYearAccount the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount)
      throws com.poesys.db.InvalidParametersException {
    ((Account)dto).setFiscalYearAccount(fiscalYearAccount);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    fiscalYearAccountLoaded = true;
  }

  public void markChildrenDeleted() {
  	((Account)dto).markChildrenDeleted();
  }
}