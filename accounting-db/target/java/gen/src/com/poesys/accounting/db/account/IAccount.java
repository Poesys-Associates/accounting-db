/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package com.poesys.accounting.db.account;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the Account. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * A division of the accounting system representing an individual accounting
 * element; divided into assets, liabilities, and equity on the balance sheet or
 * income or expense on the income statement; owned by an accounting entity
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface IAccount extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   */
  void markChildrenDeleted();

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: entityName
   * </p>
   * @return a java.lang.String entityName
   */
  public java.lang.String getEntityName();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the account name; unique within the entity
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: accountName
   * </p>
   * @return a java.lang.String accountName
   */
  public java.lang.String getAccountName();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * text description of the nature of the account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: description
   * </p>
   * @return a java.lang.String description
   */
  public java.lang.String getDescription();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the description.
   * </p>
   *
   * @param description the value to set into the description
   * @throws com.poesys.db.InvalidParametersException when the description 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setDescription(java.lang.String description) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * whether the account transaction items default to a debit or credit item; chosen
   * as the "usual" value for items in this account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: debitDefault
   * </p>
   * @return a java.lang.Boolean debitDefault
   */
  public java.lang.Boolean getDebitDefault();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the debitDefault.
   * </p>
   *
   * @param debitDefault the value to set into the debitDefault
   * @throws com.poesys.db.InvalidParametersException when the debitDefault 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setDebitDefault(java.lang.Boolean debitDefault) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the kind of account:
   * </p>
   * <p>
   * <ul>
   * </p>
   * <p>
   * <li>Asset: a kind of property with a value owned by the accounting entity</li>
   * </p>
   * <p>
   * <li>Liability: a kind of debt owed by the accounting entity to another
   * entity</li>
   * </p>
   * <p>
   * <li>Equity: a kind of fund invested by the accounting entity in the business;
   * the difference between value of assets and value of liabilities</li>
   * </p>
   * <p>
   * <li>Income: revenues paid to the accounting entity</li>
   * </p>
   * <p>
   * <li>Expense: money paid by the accounting entity to another entity</li>
   * </p>
   * <p>
   * </ul>
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: accountType
   * </p>
   * @return a java.lang.String accountType
   */
  public java.lang.String getAccountType();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the accountType.
   * </p>
   *
   * @param accountType the value to set into the accountType
   * @throws com.poesys.db.InvalidParametersException when the accountType 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setAccountType(java.lang.String accountType) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * whether this account is a receivable account, representing an asset that is a
   * debt owed to the accounting entity
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: receivable
   * </p>
   * @return a java.lang.Boolean receivable
   */
  public java.lang.Boolean getReceivable();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the receivable.
   * </p>
   *
   * @param receivable the value to set into the receivable
   * @throws com.poesys.db.InvalidParametersException when the receivable 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setReceivable(java.lang.Boolean receivable) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * whether the account is active at the present time.
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: active
   * </p>
   * @return a java.lang.Boolean active
   */
  public java.lang.Boolean getActive();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the active.
   * </p>
   *
   * @param active the value to set into the active
   * @throws com.poesys.db.InvalidParametersException when the active 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setActive(java.lang.Boolean active) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the group into which the account is aggregated
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * Owning DTO: AccountGroup
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: group
   * </p>
   * @return a com.poesys.accounting.db.account.IAccountGroup group
   */
  public com.poesys.accounting.db.account.IAccountGroup getGroup();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the group.
   * </p>
   *
   * @param group the value to set into the group
   * @throws com.poesys.db.InvalidParametersException when the group 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setGroup(com.poesys.accounting.db.account.IAccountGroup group) throws com.poesys.db.InvalidParametersException;


  /**
   * 
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * Owning DTO: Entity
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: entity
   * </p>
   * @return a com.poesys.accounting.db.account.IEntity entity
   */
  public com.poesys.accounting.db.account.IEntity getEntity();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the entity.
   * </p>
   *
   * @param entity the value to set into the entity
   * @throws com.poesys.db.InvalidParametersException when the entity 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setEntity(com.poesys.accounting.db.account.IEntity entity) throws com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddToOneAssociationAttributeProperties
   * Owning DTO: AccountGroup
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: group
   * </p>
   * @return a java.lang.String groupName
   */
  public java.lang.String getGroupName();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of fiscal years for which an account is active
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: FiscalYear
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: years
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IAccount object.
   * </p>
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> getYears();

  /**
   * Clear the years so that it will lazily reload.
   */
  public void clearYears();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the years.
   * </p>
   *
   * @param years the value to set into the years
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setFiscalYear(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years) ;


  /**
   * <p>
   * the set of items against the account
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: Item
   * Owning package: com.poesys.accounting.db.transaction
   * Property prefix: items
   * </p>
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem> items
   */
  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the items.
   * </p>
   *
   * @param items the value to set into the items
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items) ;


  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * Owning DTO: FiscalYearAccount
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: years
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * IAccount object.
   * </p>
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount();

  /**
   * Clear the fiscalYearAccount so that it will lazily reload.
   */
  public void clearFiscalYearAccount();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the fiscalYearAccount.
   * </p>
   *
   * @param fiscalYearAccount the value to set into the fiscalYearAccount
   * @throws com.poesys.db.InvalidParametersException when the fiscalYearAccount 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount) throws com.poesys.db.InvalidParametersException;


  /**
   * Add a FiscalYear object to the years collection.
   *
   * @param object the object to add to the collection
   */
  public void addYearsFiscalYear(com.poesys.accounting.db.account.IFiscalYear object);

  /**
   * Add a Item object to the items collection.
   *
   * @param object the object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object);

  /**
   * Add a FiscalYearAccount object to the fiscalYearAccount collection.
   *
   * @param object the object to add to the collection
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object);
}