/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * FiscalYear. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An accounting period, usually either coterminous with a calendar year with the
 * same name or varying over an annual period starting on a particular calendar
 * date within the year; identifies a complete accounting period for statements
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractFiscalYearProxy extends AbstractLazyLoadingDtoProxy implements IFiscalYear {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractFiscalYearProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractFiscalYearProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractFiscalYearProxy>();
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the accounts property has been loaded */
  transient boolean accountsLoaded = false;

  /**
   * Query setter for lazily querying nested accounts collection
   * (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccountsByFiscalYear
   */
  private class QueryAccountsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IAccount, IFiscalYear, java.util.List<com.poesys.accounting.db.account.IAccount>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 100;

    /**
     * Create a QueryAccountsSetter object.
     */
    public QueryAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IFiscalYear getParametersDto() {
      return AbstractFiscalYearProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IAccount, IFiscalYear> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccountsByFiscalYear();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.account.IAccount> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IAccount child : collection) {
          child.attach(AbstractFiscalYearProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractFiscalYearProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setAccount(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded accounts
      return accountsLoaded;
    }
  }


  /**
   * Add a com.poesys.accounting.db.account.IAccount object to the Accounts collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.account.IAccount object to add to the collection
   */
  public void addAccountsAccount(com.poesys.accounting.db.account.IAccount object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!accountsLoaded) {
      getAccounts();
    }
    ((FiscalYear)dto).addAccountsAccount(object);
  }

  

  /** Flag indicating whether the fiscalYearAccount property has been loaded */
  transient boolean fiscalYearAccountLoaded = false;

  /**
   * Query setter for lazily querying nested fiscalYearAccount collection
   * (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByFiscalYear
   */
  private class QueryFiscalYearAccountSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IFiscalYearAccount, IFiscalYear, java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryFiscalYearAccountSetter object.
     */
    public QueryFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IFiscalYear getParametersDto() {
      return AbstractFiscalYearProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYearAccount, IFiscalYear> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByFiscalYear();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IFiscalYearAccount child : collection) {
          child.attach(AbstractFiscalYearProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractFiscalYearProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setFiscalYearAccount(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded fiscalYearAccount
      return fiscalYearAccountLoaded;
    }
  }


  /**
   * Add a com.poesys.accounting.db.account.IFiscalYearAccount object to the FiscalYearAccount collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYearAccount object to add to the collection
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!fiscalYearAccountLoaded) {
      getFiscalYearAccount();
    }
    ((FiscalYear)dto).addFiscalYearAccountFiscalYearAccount(object);
  }

  /**
   * Create a FiscalYearProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractFiscalYearProxy(FiscalYear dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();

    // Add query setters for single-object deserialization.
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractFiscalYearProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractFiscalYearProxy otherProxy = (AbstractFiscalYearProxy)obj;
    return ((FiscalYear)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((FiscalYear)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddNaturalKeyProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getYear() {
    return ((FiscalYear)dto).getYear();
  }

  /**
   * Set the year from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param year the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setYear(java.lang.Integer year)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYear)dto).setYear(year);
  }

  /**
   * Get an object of java.sql.Timestamp
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.sql.Timestamp
   */
  public java.sql.Timestamp getStartDate() {
    return ((FiscalYear)dto).getStartDate();
  }

  /**
   * Set the startDate from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param startDate the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setStartDate(java.sql.Timestamp startDate)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYear)dto).setStartDate(startDate);
  }

  /**
   * Get an object of java.sql.Timestamp
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.sql.Timestamp
   */
  public java.sql.Timestamp getEndDate() {
    return ((FiscalYear)dto).getEndDate();
  }

  /**
   * Set the endDate from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param endDate the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setEndDate(java.sql.Timestamp endDate)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYear)dto).setEndDate(endDate);
  }

  /**
   * Get a list of com.poesys.accounting.db.account.IAccount
   * loading the accounts association if it is not already in memory.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.List<com.poesys.accounting.db.account.IAccount>
   */
  public java.util.List<com.poesys.accounting.db.account.IAccount> getAccounts() {
    // Lazy-load the local property accounts if not loaded.
    if (!accountsLoaded) {
      com.poesys.db.dto.ISet setter = new QueryAccountsSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      accountsLoaded = true;
    }
    return ((FiscalYear)dto).getAccounts();
  }


  /**
   * Clear the lazily loaded property accounts if it is loaded.
   */
  public void clearAccounts() {
    // Only clear if loaded already.
    if (accountsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((FiscalYear)dto).setAccount(null);
        ((FiscalYear)dto).undoStatus();
        accountsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the accounts from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param accounts the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setAccount(java.util.List<com.poesys.accounting.db.account.IAccount> accounts)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYear)dto).setAccount(accounts);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    accountsLoaded = true;
  }

  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYearAccount
   * loading the fiscalYearAccount association if it is not already in memory.
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount() {
    // Lazy-load the local property fiscalYearAccount if not loaded.
    if (!fiscalYearAccountLoaded) {
      com.poesys.db.dto.ISet setter = new QueryFiscalYearAccountSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      fiscalYearAccountLoaded = true;
    }
    return ((FiscalYear)dto).getFiscalYearAccount();
  }


  /**
   * Clear the lazily loaded property fiscalYearAccount if it is loaded.
   */
  public void clearFiscalYearAccount() {
    // Only clear if loaded already.
    if (fiscalYearAccountLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((FiscalYear)dto).setFiscalYearAccount(null);
        ((FiscalYear)dto).undoStatus();
        fiscalYearAccountLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the fiscalYearAccount from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param fiscalYearAccount the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount)
      throws com.poesys.db.InvalidParametersException {
    ((FiscalYear)dto).setFiscalYearAccount(fiscalYearAccount);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    fiscalYearAccountLoaded = true;
  }

  public void markChildrenDeleted() {
  	((FiscalYear)dto).markChildrenDeleted();
  }
}