/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.accounting.bs.transaction;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.accounting.db.transaction.IReimbursement;
import com.poesys.accounting.db.transaction.ReimbursementProxy;
import com.poesys.accounting.db.transaction.Reimbursement;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Reimbursement. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A link between a receivable item and another receivable item that reimburses the
 * first one; the first one is a debit against a receivable account, the second one
 * is a credit against the same account. The accounts associated with related items
 * must be the same. One receivable item can be reimbursed by several reimbursement
 * items, and one reimbursement item can reimburse several receivables. For
 * example, you take a business trip and have 15 separate items that you submit as
 * receivables from the company. The company pays you with a single expense check:
 * that creates 15 links to the various receivables. If it pays you with a couple
 * of different checks, there would still be 15 links, but there would be multiple
 * reimbursement items in the set as well as multiple receivable items. A link has
 * a reimbursement amount that must be less than or equal to the reimbursement
 * item's amount (part or all of the amount constitutes the reimbursement); the set
 * of links for one reimbursement item must have reimbursement amounts that sum to
 * less than the item amount. There can also be allocated amounts that aren't
 * reimbursed; those are not part of the summation validation, but they do
 * participate in sums of amounts applied to the receivable--the sum of all link
 * reimbursement and allocated amounts for a specific receivable item should be
 * less than or equal to the receivable amount; less than means the receivable was
 * not entirely reimbursed and requires additional payments (or writing off). You
 * can have a reimbursement link with a zero reimbursement amount and a positive
 * allocated amount.
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsReimbursement 
    extends AbstractDto<com.poesys.accounting.db.transaction.IReimbursement> {

  /**
   * Create a BsReimbursement object from a Reimbursement object.
   * 
   * @param dto the data-access layer Reimbursement DTO
   * @throws DelegateException when there is a problem creating the Reimbursement
   */
  public AbstractBsReimbursement(IReimbursement dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Reimbursement from new data.
   *
   * @param key the primary key of the Reimbursement
   * @param receivablesObject associated Item object
   * @param reimbursingItemsObject associated Item object
   * @param receivablesOrderNumber Attribute that is part of the association key
   * @param reimbursingItemsOrderNumber Attribute that is part of the association key
   * @param receivablesTransactionId Attribute that is part of the association key
   * @param reimbursingItemsTransactionId Attribute that is part of the association key
   * @param reimbursedAmount the amount of the receivable item amount that is reimbursed by the reimbursement
item (must be less than or equal to the reimbursement amount)
   * @param allocatedAmount dollar amount not reimbursed by any reimbursement item; this "writes off" the
allocated amount when summing up amounts applied against the receivable
   */
  public AbstractBsReimbursement(IPrimaryKey key, com.poesys.accounting.db.transaction.IItem receivablesObject, com.poesys.accounting.db.transaction.IItem reimbursingItemsObject, java.lang.Integer receivablesOrderNumber, java.lang.Integer reimbursingItemsOrderNumber, java.math.BigInteger receivablesTransactionId, java.math.BigInteger reimbursingItemsTransactionId, java.lang.Double reimbursedAmount, java.lang.Double allocatedAmount) {
    super(new ReimbursementProxy(new Reimbursement(key, receivablesObject, reimbursingItemsObject, receivablesOrderNumber, reimbursingItemsOrderNumber, receivablesTransactionId, reimbursingItemsTransactionId, reimbursedAmount, allocatedAmount)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IReimbursement> other = (IDto<IReimbursement>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IReimbursement> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * the amount of the receivable item amount that is reimbursed by the reimbursement
   * item (must be less than or equal to the reimbursement amount)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.lang.Double reimbursedAmount
   */
  public java.lang.Double getReimbursedAmount() {
    return dto.getReimbursedAmount();
  }

  /**
   * <p>
   * Set the reimbursedAmount.
   * </p>
   * <p>
   * the amount of the receivable item amount that is reimbursed by the reimbursement
   * item (must be less than or equal to the reimbursement amount)
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @param reimbursedAmount the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter reimbursedAmount is null
   */
  public void setReimbursedAmount(java.lang.Double reimbursedAmount) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setReimbursedAmount(reimbursedAmount);
  }

  /**
   * <p>
   * dollar amount not reimbursed by any reimbursement item; this "writes off" the
   * allocated amount when summing up amounts applied against the receivable
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.lang.Double allocatedAmount
   */
  public java.lang.Double getAllocatedAmount() {
    return dto.getAllocatedAmount();
  }

  /**
   * <p>
   * Set the allocatedAmount.
   * </p>
   * <p>
   * dollar amount not reimbursed by any reimbursement item; this "writes off" the
   * allocated amount when summing up amounts applied against the receivable
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @param allocatedAmount the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter allocatedAmount is null
   */
  public void setAllocatedAmount(java.lang.Double allocatedAmount) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setAllocatedAmount(allocatedAmount);
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsReimbursement object.
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a com.poesys.accounting.bs.transaction.BsItem reimbursingItem
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public com.poesys.accounting.bs.transaction.BsItem getReimbursingItem() throws java.sql.SQLException {
    // Return 4
    return new com.poesys.accounting.bs.transaction.BsItem(dto.getReimbursingItem());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsReimbursement object.
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a com.poesys.accounting.bs.transaction.BsItem receivable
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public com.poesys.accounting.bs.transaction.BsItem getReceivable() throws java.sql.SQLException {
    // Return 4
    return new com.poesys.accounting.bs.transaction.BsItem(dto.getReceivable());
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.lang.Integer receivablesOrderNumber
   */
  public java.lang.Integer getReceivablesOrderNumber() {
    return dto.getReceivablesOrderNumber();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.lang.Integer reimbursingItemsOrderNumber
   */
  public java.lang.Integer getReimbursingItemsOrderNumber() {
    return dto.getReimbursingItemsOrderNumber();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.math.BigInteger receivablesTransactionId
   */
  public java.math.BigInteger getReceivablesTransactionId() {
    return dto.getReceivablesTransactionId();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Reimbursement</li>
   * </ul>
   * @return a java.math.BigInteger reimbursingItemsTransactionId
   */
  public java.math.BigInteger getReimbursingItemsTransactionId() {
    return dto.getReimbursingItemsTransactionId();
  }
}