/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.accounting.bs.transaction;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.accounting.db.transaction.ITransaction;
import com.poesys.accounting.db.transaction.TransactionProxy;
import com.poesys.accounting.db.transaction.Transaction;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Transaction. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An exchange of value between accounts; the items that correspond to the fiscal
 * year accounts must balance (cancel each other out with respect to debits and
 * credits)
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsTransaction 
    extends AbstractDto<com.poesys.accounting.db.transaction.ITransaction> {

  /**
   * A List builder helper class for building a business-layer List 
   * of BsItem objects from a List items of data-access-layer 
   * com.poesys.accounting.db.transaction.IItem objects
   */
  private class BsItemsListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.accounting.db.transaction.IItem, com.poesys.accounting.bs.transaction.BsItem> {
    @Override
    public com.poesys.accounting.bs.transaction.BsItem get(com.poesys.accounting.db.transaction.IItem dto) {
      return new com.poesys.accounting.bs.transaction.BsItem(dto);
    }
  }

  /**
   * A List builder helper class for building a data-access-layer List 
   * of Item objects from an input List items of 
   * business-layer BsItem objects
   */
  private class ItemsListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.accounting.bs.transaction.BsItem, com.poesys.accounting.db.transaction.IItem> {
    @Override
    public com.poesys.accounting.db.transaction.IItem get(com.poesys.accounting.bs.transaction.BsItem dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsTransaction object from a Transaction object.
   * 
   * @param dto the data-access layer Transaction DTO
   * @throws DelegateException when there is a problem creating the Transaction
   */
  public AbstractBsTransaction(ITransaction dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Transaction from new data.
   *
   * @param key the primary key of the Transaction
   * @param transactionId primary key attribute
   * @param description a text describing the nature of the transaction
   * @param transactionDate the calendar day on which the transaction occurred
   * @param checked whether the transaction is reconciled and validated
   * @param balance whether the transaction represents a balance transaction, the transfer of an
amount onto the balance sheet; balance transactions do not need to have
off-setting debits and credits and are ignored in balance checking for normal
transactions
   */
  public AbstractBsTransaction(IPrimaryKey key, java.math.BigInteger transactionId, java.lang.String description, java.sql.Timestamp transactionDate, java.lang.Boolean checked, java.lang.Boolean balance) {
    super(new TransactionProxy(new Transaction(key, transactionId, description, transactionDate, checked, balance)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ITransaction> other = (IDto<ITransaction>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ITransaction> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a java.math.BigInteger transactionId
   */
  public java.math.BigInteger getTransactionId() {
    return dto.getTransactionId();
  }

  /**
   * <p>
   * a text describing the nature of the transaction
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a java.lang.String description
   */
  public java.lang.String getDescription() {
    return dto.getDescription();
  }

  /**
   * <p>
   * Set the description.
   * </p>
   * <p>
   * a text describing the nature of the transaction
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @param description the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter description is null
   */
  public void setDescription(java.lang.String description) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDescription(description);
  }

  /**
   * <p>
   * the calendar day on which the transaction occurred
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a java.sql.Timestamp transactionDate
   */
  public java.sql.Timestamp getTransactionDate() {
    return dto.getTransactionDate();
  }

  /**
   * <p>
   * Set the transactionDate.
   * </p>
   * <p>
   * the calendar day on which the transaction occurred
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @param transactionDate the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter transactionDate is null
   */
  public void setTransactionDate(java.sql.Timestamp transactionDate) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setTransactionDate(transactionDate);
  }

  /**
   * <p>
   * whether the transaction is reconciled and validated
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a java.lang.Boolean checked
   */
  public java.lang.Boolean getChecked() {
    return dto.getChecked();
  }

  /**
   * <p>
   * Set the checked.
   * </p>
   * <p>
   * whether the transaction is reconciled and validated
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @param checked the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter checked is null
   */
  public void setChecked(java.lang.Boolean checked) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setChecked(checked);
  }

  /**
   * <p>
   * whether the transaction represents a balance transaction, the transfer of an
   * amount onto the balance sheet; balance transactions do not need to have
   * off-setting debits and credits and are ignored in balance checking for normal
   * transactions
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a java.lang.Boolean balance
   */
  public java.lang.Boolean getBalance() {
    return dto.getBalance();
  }

  /**
   * <p>
   * Set the balance.
   * </p>
   * <p>
   * whether the transaction represents a balance transaction, the transfer of an
   * amount onto the balance sheet; balance transactions do not need to have
   * off-setting debits and credits and are ignored in balance checking for normal
   * transactions
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @param balance the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter balance is null
   */
  public void setBalance(java.lang.Boolean balance) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setBalance(balance);
  }

  /**
   * <p>
   * the set of items belonging to the transaction; the debit and credit values must
   * cancel each other out by summing to zero
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @return a com.poesys.accounting.bs.transaction.BsItem balance
   */
  public java.util.List<com.poesys.accounting.bs.transaction.BsItem> getItems() {
    BsItemsListBuilder builder = new BsItemsListBuilder();
    return builder.getList(dto.getItems());
  }

  /**
   * <p>
   * Set the items.
   * </p>
   * <p>
   * the set of items belonging to the transaction; the debit and credit values must
   * cancel each other out by summing to zero
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Transaction</li>
   * </ul>
   * @param balance the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter balance is null
   */
  public void setItems(java.util.List<com.poesys.accounting.bs.transaction.BsItem> balance) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    ItemsListBuilder builder = new ItemsListBuilder();
      dto.setItems(builder.getList(balance));
  }

  /**
   * Add a Item object to the items collection.
   *
   * @param object the object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.bs.transaction.BsItem object) {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addItemsItem(object.toDto());
  }
}