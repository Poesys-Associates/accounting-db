/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.accounting.bs.account;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.accounting.db.account.ICapitalEntity;
import com.poesys.accounting.db.account.CapitalEntityProxy;
import com.poesys.accounting.db.account.CapitalEntity;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the CapitalEntity. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsCapitalEntity 
    extends AbstractDto<com.poesys.accounting.db.account.ICapitalEntity> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsCapitalAccount objects from a Collection capitalAccount of data-access-layer 
   * com.poesys.accounting.db.account.ICapitalAccount objects
   */
  private class BsCapitalAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.account.ICapitalAccount, com.poesys.accounting.bs.account.BsCapitalAccount> {
    @Override
    public com.poesys.accounting.bs.account.BsCapitalAccount get(com.poesys.accounting.db.account.ICapitalAccount dto) {
      return new com.poesys.accounting.bs.account.BsCapitalAccount(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of CapitalAccount objects from an input Collection capitalAccount of 
   * business-layer BsCapitalAccount objects
   */
  private class CapitalAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.account.BsCapitalAccount, com.poesys.accounting.db.account.ICapitalAccount> {
    @Override
    public com.poesys.accounting.db.account.ICapitalAccount get(com.poesys.accounting.bs.account.BsCapitalAccount dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsDistributionAccount objects from a Collection distributionAccount of data-access-layer 
   * com.poesys.accounting.db.account.IDistributionAccount objects
   */
  private class BsDistributionAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.account.IDistributionAccount, com.poesys.accounting.bs.account.BsDistributionAccount> {
    @Override
    public com.poesys.accounting.bs.account.BsDistributionAccount get(com.poesys.accounting.db.account.IDistributionAccount dto) {
      return new com.poesys.accounting.bs.account.BsDistributionAccount(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of DistributionAccount objects from an input Collection distributionAccount of 
   * business-layer BsDistributionAccount objects
   */
  private class DistributionAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.account.BsDistributionAccount, com.poesys.accounting.db.account.IDistributionAccount> {
    @Override
    public com.poesys.accounting.db.account.IDistributionAccount get(com.poesys.accounting.bs.account.BsDistributionAccount dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsCapitalEntity object from a CapitalEntity object.
   * 
   * @param dto the data-access layer CapitalEntity DTO
   * @throws DelegateException when there is a problem creating the CapitalEntity
   */
  public AbstractBsCapitalEntity(ICapitalEntity dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a CapitalEntity from new data.
   *
   * @param key the primary key of the CapitalEntity
   * @param capitalEntityName 
   */
  public AbstractBsCapitalEntity(IPrimaryKey key, java.lang.String capitalEntityName) {
    super(new CapitalEntityProxy(new CapitalEntity(key, capitalEntityName)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ICapitalEntity> other = (IDto<ICapitalEntity>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ICapitalEntity> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * 
   * <p>
   * Added by AddNaturalKeyProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object CapitalEntity</li>
   * </ul>
   * @return a java.lang.String capitalEntityName
   */
  public java.lang.String getCapitalEntityName() {
    return dto.getCapitalEntityName();
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object CapitalEntity</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsCapitalAccount capitalEntityName
   */
  public java.util.Collection<com.poesys.accounting.bs.account.BsCapitalAccount> getCapitalAccount() {
    BsCapitalAccountCollectionBuilder builder = new BsCapitalAccountCollectionBuilder();
    return builder.getCollection(dto.getCapitalAccount());
  }

  /**
   * <p>
   * Set the capitalAccount.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object CapitalEntity</li>
   * </ul>
   * @param capitalEntityName the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setCapitalAccount(java.util.Collection<com.poesys.accounting.bs.account.BsCapitalAccount> capitalEntityName) 
      throws com.poesys.db.dto.DtoStatusException{
    CapitalAccountCollectionBuilder builder = new CapitalAccountCollectionBuilder();
      dto.setCapitalAccount(builder.getCollection(capitalEntityName));
  }

  /**
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object CapitalEntity</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsDistributionAccount capitalEntityName
   */
  public java.util.Collection<com.poesys.accounting.bs.account.BsDistributionAccount> getDistributionAccount() {
    BsDistributionAccountCollectionBuilder builder = new BsDistributionAccountCollectionBuilder();
    return builder.getCollection(dto.getDistributionAccount());
  }

  /**
   * <p>
   * Set the distributionAccount.
   * </p>
   * 
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object CapitalEntity</li>
   * </ul>
   * @param capitalEntityName the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setDistributionAccount(java.util.Collection<com.poesys.accounting.bs.account.BsDistributionAccount> capitalEntityName) 
      throws com.poesys.db.dto.DtoStatusException{
    DistributionAccountCollectionBuilder builder = new DistributionAccountCollectionBuilder();
      dto.setDistributionAccount(builder.getCollection(capitalEntityName));
  }

  /**
   * Add a CapitalAccount object to the capitalAccount collection.
   *
   * @param object the object to add to the collection
   */
  public void addCapitalAccountCapitalAccount(com.poesys.accounting.bs.account.BsCapitalAccount object) {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addCapitalAccountCapitalAccount(object.toDto());
  }

  /**
   * Add a DistributionAccount object to the distributionAccount collection.
   *
   * @param object the object to add to the collection
   */
  public void addDistributionAccountDistributionAccount(com.poesys.accounting.bs.account.BsDistributionAccount object) {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addDistributionAccountDistributionAccount(object.toDto());
  }
}