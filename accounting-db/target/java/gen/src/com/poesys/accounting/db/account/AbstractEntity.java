/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.account;


import com.poesys.db.dao.PoesysTrackingThread;
import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the Entity. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * The entity is the person or organization that owns all the accounts and the
 * transactions in them and is the basis for the accounting statements
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractEntity extends AbstractDto implements IEntity {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractEntity.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractEntity> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractEntity>();

  
  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested accounts
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccountsByEntity
   */
  private class QueryAccountsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.accounting.db.account.IAccount, IEntity, java.util.Collection<com.poesys.accounting.db.account.IAccount>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAccountsSetter object.
     */
    public QueryAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IEntity getParametersDto() {
      return AbstractEntity.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IAccount, IEntity> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccountsByEntity();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IAccount> list) {
      // No status change; this is just filling in the object data.
      accounts = list;
      // Add the primary keys to the serialized key list if there are any.
      if (accounts != null) {
        if (accountsKeys != null) {
          accountsKeys.clear();
        } else {
          accountsKeys = new java.util.ArrayList<IPrimaryKey>();
        }
        for (com.poesys.db.dto.IDbDto object : accounts) {
          accountsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated accounts list is not null
      return accounts != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested accounts collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryAccount
   */
  private class ReadAccountsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<com.poesys.accounting.db.account.IAccount> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAccountsSetter object to read the accounts collection.
     */
    public ReadAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @Override
    protected java.util.Collection<com.poesys.accounting.db.account.IAccount> getObjectCollection() {
      return accounts;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return accountsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryAccount();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IAccount> collection) {
     accounts = collection;
    }
  }

  /**
   * Post-processing setter for post-processing nested to-many association accounts.
   */
  private class PostProcessAccountsSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association accounts source: AddToManyChildCollectionProperties

    /**
     * Create an PostProcessAccountsSetter object.
     */
    public PostProcessAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = accounts;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association accounts.
   *
   * @see com.poesys.accounting.db.account.sql.InsertAccount
   */
  private class InsertAccountsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association accounts source: AddToManyChildCollectionProperties

    /**
     * Create an InsertAccountsSetter object.
     */
    public InsertAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = accounts;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }

    @Override
    protected void doSet(PoesysTrackingThread thread) {
      super.doSet(thread);
    }
  }

  /**
   * Setter for processing added accounts and updated accounts.
   * Deleted accounts are deleted in the database cascade delete.
   */

  private class UpdateAccountsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.account.IAccount, java.util.Collection<com.poesys.accounting.db.account.IAccount>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateAccountsSetter object.
     */
    public UpdateAccountsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(java.util.Collection<com.poesys.accounting.db.account.IAccount> dtos) {
      // accounts source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Account.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.account.IAccount> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.account.sql.UpdateAccount());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.Collection<com.poesys.accounting.db.account.IAccount> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Account.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.account.IAccount> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.account.sql.DeleteAccount());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.Collection<com.poesys.accounting.db.account.IAccount> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Account.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.account.IAccount> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.account.sql.InsertAccount());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.accounting.db.account.IAccount> getDtos() {
      return accounts;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Account.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.account.IAccount object to accounts collection.
   * 
   * @param object the com.poesys.accounting.db.account.IAccount object
   */
  public void addAccountsAccount(com.poesys.accounting.db.account.IAccount object) {
    if (accounts == null) {
      // Association not yet created, create it.
      accounts = new java.util.ArrayList<com.poesys.accounting.db.account.IAccount>();
    }
    accounts.add(object);
    // Add the primary key to the primary key array.
    if (accountsKeys != null) {
      accountsKeys.clear();
    } else {
      accountsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    accountsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Entity for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractEntity() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the accounts property.
    querySetters.add(new QueryAccountsSetter());
    readObjectSetters.add(new ReadAccountsSetter());
    insertSetters.add(new InsertAccountsSetter());
    postSetters.add(new UpdateAccountsSetter());
    postProcessSetters.add(new PostProcessAccountsSetter());
  }

  /**
   * Create a Entity. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Entity
   * @param entityName the name of the accounting entity; unique among all entities
   */
  public AbstractEntity(IPrimaryKey key, java.lang.String entityName) {
    this.key = key;

    this.entityName = entityName;

    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the accounts property.
    querySetters.add(new QueryAccountsSetter());
    readObjectSetters.add(new ReadAccountsSetter());
    insertSetters.add(new InsertAccountsSetter());
    postSetters.add(new UpdateAccountsSetter());
    postProcessSetters.add(new PostProcessAccountsSetter());
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractEntity");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    IEntity other = (IEntity)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IEntity other = (IEntity)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.account";
  }

  @Override
  public void markChildrenDeleted() {
    // Only process deletes if child exists.
    if (accounts != null) {
      for (com.poesys.db.dto.IDbDto dto : accounts) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property entityName
   *
   * <p>
   * the name of the accounting entity; unique among all entities
   * </p>
   *
   * Added by AddNaturalKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String entityName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getEntityName() {
    return entityName;
  }

  /**
   * Clear the entityName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEntityName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the entityName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the name of the accounting entity; unique among all entities
   * </p>
   *
   * @param entityName the value with which to set the property
   */
  void setEntityName(java.lang.String entityName)
      throws com.poesys.db.InvalidParametersException {
    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required");
    }
    
    this.entityName = entityName;
    setChanged();
  }
  /**
   * Nested property accounts
   *
   * 
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.accounting.db.account.IAccount> accounts;
  // Ordered list of keys of the objects in the accounts list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> accountsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.accounting.db.account.IAccount.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IAccount>
   */

  public java.util.Collection<com.poesys.accounting.db.account.IAccount> getAccounts() {
    return accounts;
  }

  /**
   * Clear the accounts data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccounts() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accounts.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param accounts the value with which to set the property
   */
  public  void setAccounts(java.util.Collection<com.poesys.accounting.db.account.IAccount> accounts) {
    this.accounts = accounts;
    // Add the primary keys of the new collection to the serialized key list.
    if (accountsKeys != null) {
      accountsKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      accountsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (accounts != null) {
    if (accountsKeys != null) {
      accountsKeys.clear();
    } else {
      accountsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : accounts) {
        accountsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {

    // Clean up accounts.
    if (subject != null && subject instanceof com.poesys.accounting.db.account.IAccount && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        accounts != null) {
      // Delete to-many accounts child from collection
      accounts.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the Entity and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IEntity> entityFactory =
      manager.getFactory("com.poesys.accounting.db.account.Entity",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IEntity> sql =
      new com.poesys.accounting.db.account.sql.InsertEntity();
    com.poesys.db.dao.insert.IInsert<IEntity> inserter =
      entityFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}