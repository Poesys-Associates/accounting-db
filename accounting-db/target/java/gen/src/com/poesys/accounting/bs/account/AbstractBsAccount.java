/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.accounting.bs.account;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.accounting.db.account.IAccount;
import com.poesys.accounting.db.account.AccountProxy;
import com.poesys.accounting.db.account.Account;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Account. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A division of the accounting system representing an individual accounting
 * element; divided into assets, liabilities, and equity on the balance sheet or
 * income or expense on the income statement; owned by an accounting entity
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsAccount 
    extends AbstractDto<com.poesys.accounting.db.account.IAccount> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsFiscalYear objects from a Collection years of data-access-layer 
   * com.poesys.accounting.db.account.IFiscalYear objects
   */
  private class BsYearsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.account.IFiscalYear, com.poesys.accounting.bs.account.BsFiscalYear> {
    @Override
    public com.poesys.accounting.bs.account.BsFiscalYear get(com.poesys.accounting.db.account.IFiscalYear dto) {
      return new com.poesys.accounting.bs.account.BsFiscalYear(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of FiscalYear objects from an input Collection years of 
   * business-layer BsFiscalYear objects
   */
  private class YearsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.account.BsFiscalYear, com.poesys.accounting.db.account.IFiscalYear> {
    @Override
    public com.poesys.accounting.db.account.IFiscalYear get(com.poesys.accounting.bs.account.BsFiscalYear dto) {
      return dto.toDto();
    }
  }

  /**
   * A List builder helper class for building a business-layer List 
   * of BsItem objects from a List items of data-access-layer 
   * com.poesys.accounting.db.transaction.IItem objects
   */
  private class BsItemsListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.accounting.db.transaction.IItem, com.poesys.accounting.bs.transaction.BsItem> {
    @Override
    public com.poesys.accounting.bs.transaction.BsItem get(com.poesys.accounting.db.transaction.IItem dto) {
      return new com.poesys.accounting.bs.transaction.BsItem(dto);
    }
  }

  /**
   * A List builder helper class for building a data-access-layer List 
   * of Item objects from an input List items of 
   * business-layer BsItem objects
   */
  private class ItemsListBuilder 
      extends com.poesys.bs.dto.ListBuilder<com.poesys.accounting.bs.transaction.BsItem, com.poesys.accounting.db.transaction.IItem> {
    @Override
    public com.poesys.accounting.db.transaction.IItem get(com.poesys.accounting.bs.transaction.BsItem dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsFiscalYearAccount objects from a Collection fiscalYearAccount of data-access-layer 
   * com.poesys.accounting.db.account.IFiscalYearAccount objects
   */
  private class BsFiscalYearAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.account.IFiscalYearAccount, com.poesys.accounting.bs.account.BsFiscalYearAccount> {
    @Override
    public com.poesys.accounting.bs.account.BsFiscalYearAccount get(com.poesys.accounting.db.account.IFiscalYearAccount dto) {
      return new com.poesys.accounting.bs.account.BsFiscalYearAccount(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of FiscalYearAccount objects from an input Collection fiscalYearAccount of 
   * business-layer BsFiscalYearAccount objects
   */
  private class FiscalYearAccountCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.account.BsFiscalYearAccount, com.poesys.accounting.db.account.IFiscalYearAccount> {
    @Override
    public com.poesys.accounting.db.account.IFiscalYearAccount get(com.poesys.accounting.bs.account.BsFiscalYearAccount dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsAccount object from a Account object.
   * 
   * @param dto the data-access layer Account DTO
   * @throws DelegateException when there is a problem creating the Account
   */
  public AbstractBsAccount(IAccount dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Account from new data.
   *
   * @param key the primary key of the Account
   * @param entityName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param accountName the account name; unique within the entity
   * @param description text description of the nature of the account
   * @param debitDefault whether the account transaction items default to a debit or credit item; chosen
as the "usual" value for items in this account
   * @param active whether the account is active at the present time; an inactive account does not
appear in lists of accounts available through the user interface but does appear
in reports where referenced by items
   */
  public AbstractBsAccount(IPrimaryKey key, java.lang.String entityName, java.lang.String accountName, java.lang.String description, java.lang.Boolean debitDefault, java.lang.Boolean active) {
    super(new AccountProxy(new Account(key, entityName, accountName, description, debitDefault, active)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IAccount> other = (IDto<IAccount>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IAccount> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a java.lang.String entityName
   */
  public java.lang.String getEntityName() {
    return dto.getEntityName();
  }

  /**
   * <p>
   * the account name; unique within the entity
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a java.lang.String accountName
   */
  public java.lang.String getAccountName() {
    return dto.getAccountName();
  }

  /**
   * <p>
   * text description of the nature of the account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a java.lang.String description
   */
  public java.lang.String getDescription() {
    return dto.getDescription();
  }

  /**
   * <p>
   * Set the description.
   * </p>
   * <p>
   * text description of the nature of the account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param description the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter description is null
   */
  public void setDescription(java.lang.String description) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDescription(description);
  }

  /**
   * <p>
   * whether the account transaction items default to a debit or credit item; chosen
   * as the "usual" value for items in this account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a java.lang.Boolean debitDefault
   */
  public java.lang.Boolean getDebitDefault() {
    return dto.getDebitDefault();
  }

  /**
   * <p>
   * Set the debitDefault.
   * </p>
   * <p>
   * whether the account transaction items default to a debit or credit item; chosen
   * as the "usual" value for items in this account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param debitDefault the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter debitDefault is null
   */
  public void setDebitDefault(java.lang.Boolean debitDefault) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDebitDefault(debitDefault);
  }

  /**
   * <p>
   * whether the account is active at the present time; an inactive account does not
   * appear in lists of accounts available through the user interface but does appear
   * in reports where referenced by items
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a java.lang.Boolean active
   */
  public java.lang.Boolean getActive() {
    return dto.getActive();
  }

  /**
   * <p>
   * Set the active.
   * </p>
   * <p>
   * whether the account is active at the present time; an inactive account does not
   * appear in lists of accounts available through the user interface but does appear
   * in reports where referenced by items
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param active the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter active is null
   */
  public void setActive(java.lang.Boolean active) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setActive(active);
  }

  /**
   * 
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsEntity entity
   */
  public com.poesys.accounting.bs.account.BsEntity getEntity() {
    // Return 4
    return new com.poesys.accounting.bs.account.BsEntity(dto.getEntity());
  }

  /**
   * <p>
   * Set the entity.
   * </p>
   * 
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param entity the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter entity is null
   */
  public void setEntity(com.poesys.accounting.bs.account.BsEntity entity) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setEntity(entity == null ? null : entity.toDto());
  }

  /**
   * <p>
   * the set of fiscal years for which an account is active
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsAccount object.
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsFiscalYear entity
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<com.poesys.accounting.bs.account.BsFiscalYear> getYears() throws java.sql.SQLException {
    BsYearsCollectionBuilder builder = new BsYearsCollectionBuilder();
    return builder.getCollection(dto.getYears());
  }

  /**
   * <p>
   * Set the fiscalYear.
   * </p>
   * <p>
   * the set of fiscal years for which an account is active
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param entity the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setFiscalYear(java.util.Collection<com.poesys.accounting.bs.account.BsFiscalYear> entity) 
      throws com.poesys.db.dto.DtoStatusException{
    YearsCollectionBuilder builder = new YearsCollectionBuilder();
      dto.setFiscalYear(builder.getCollection(entity));
  }

  /**
   * <p>
   * the set of items against the account
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a com.poesys.accounting.bs.transaction.BsItem entity
   */
  public java.util.List<com.poesys.accounting.bs.transaction.BsItem> getItems() {
    BsItemsListBuilder builder = new BsItemsListBuilder();
    return builder.getList(dto.getItems());
  }

  /**
   * <p>
   * Set the items.
   * </p>
   * <p>
   * the set of items against the account
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param entity the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setItems(java.util.List<com.poesys.accounting.bs.transaction.BsItem> entity) 
      throws com.poesys.db.dto.DtoStatusException{
    ItemsListBuilder builder = new ItemsListBuilder();
      dto.setItems(builder.getList(entity));
  }

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsAccount object.
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsFiscalYearAccount entity
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<com.poesys.accounting.bs.account.BsFiscalYearAccount> getFiscalYearAccount() throws java.sql.SQLException {
    BsFiscalYearAccountCollectionBuilder builder = new BsFiscalYearAccountCollectionBuilder();
    return builder.getCollection(dto.getFiscalYearAccount());
  }

  /**
   * <p>
   * Set the fiscalYearAccount.
   * </p>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Account</li>
   * </ul>
   * @param entity the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter entity is null
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.bs.account.BsFiscalYearAccount> entity) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    FiscalYearAccountCollectionBuilder builder = new FiscalYearAccountCollectionBuilder();
      dto.setFiscalYearAccount(builder.getCollection(entity));
  }

  /**
   * Add a FiscalYear object to the years collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public void addYearsFiscalYear(com.poesys.accounting.bs.account.BsFiscalYear object) throws java.sql.SQLException {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addYearsFiscalYear(object.toDto());
  }

  /**
   * Add a Item object to the items collection.
   *
   * @param object the object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.bs.transaction.BsItem object) {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addItemsItem(object.toDto());
  }

  /**
   * Add a FiscalYearAccount object to the fiscalYearAccount collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.bs.account.BsFiscalYearAccount object) throws java.sql.SQLException {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto", null));
    }
    
    dto.addFiscalYearAccountFiscalYearAccount(object.toDto());
  }
}