/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package com.poesys.accounting.db.account;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, sharable set of factory methods for all the account classes,
 * including JDBC data-setting, parameter-setting, and primary-key-generation
 * methods. This class is abstract and has a single concrete subclass,
 * AccountFactory, that you can modify to override the default behavior in the
 * abstract class or implement an as-yet unimplemented method.
 * </p>
 * 
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccountFactory {
  /**
   * Retrieve the FiscalYear data from the result set's current row and create a
   * FiscalYear object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a FiscalYear instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IFiscalYear getFiscalYearData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument year gets the JDBC value with a function call.
    java.lang.Integer yearValue = rs.getInt("year");
    // Constructor argument startDate gets the JDBC value with a function call.
    java.sql.Timestamp startDateValue = rs.getTimestamp("startDate");
    // Constructor argument endDate gets the JDBC value with a function call.
    java.sql.Timestamp endDateValue = rs.getTimestamp("endDate");
    // FiscalYear has lazily loaded members or is a lazily loaded association
    // class, so create a Proxy.
    IFiscalYear newObject =
      new FiscalYearProxy(new FiscalYear(key,
                                         yearValue,
                                         startDateValue,
                                         endDateValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a FiscalYear based on a result set that must contain
   * the FiscalYear primary key columns. The method creates a primary key of a
   * type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a FiscalYear NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getFiscalYearPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Integer yearValue = rs.getInt("year");

    list.add(new com.poesys.db.col.IntegerColumnValue(prefix + "year",
                                                      yearValue));
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.account.FiscalYear");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a FiscalYear based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param year the fiscal year, a year value corresponding to the calendar
   *          year of the last day of an accounting period
   * @return a FiscalYear NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getFiscalYearPrimaryKey(java.lang.Integer year)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (year != null && noNulls) {
      list.add(new com.poesys.db.col.IntegerColumnValue("year", year));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.FiscalYear");
    }
    return key;
  }

  /**
   * Retrieve the FiscalYearAccount data from the result set's current row and
   * create a FiscalYearAccount object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a FiscalYearAccount instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IFiscalYearAccount getFiscalYearAccountData(IPrimaryKey key,
                                                            ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.accounting.db.account.IAccount accountsObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.accounting.db.account.IAccountGroup groupObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    com.poesys.accounting.db.account.IFiscalYear yearsObject = null;
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Constructor argument year gets the JDBC value with a function call.
    java.lang.Integer yearValue = rs.getInt("year");
    // Constructor argument accountOrderNumber gets the JDBC value with a
    // function call.
    java.lang.Integer accountOrderNumberValue = rs.getInt("accountOrderNumber");
    // Constructor argument groupOrderNumber gets the JDBC value with a function
    // call.
    java.lang.Integer groupOrderNumberValue = rs.getInt("groupOrderNumber");
    // Constructor argument accountType gets the JDBC value with a function
    // call.
    java.lang.String accountTypeValue = rs.getString("accountType");
    // Constructor argument groupName gets the JDBC value with a function call.
    java.lang.String groupNameValue = rs.getString("groupName");
    com.poesys.accounting.db.account.IAccountGroup groupValue = null;
    // FiscalYearAccount has lazily loaded members or is a lazily loaded
    // association class, so create a Proxy.
    IFiscalYearAccount newObject =
      new FiscalYearAccountProxy(new FiscalYearAccount(key,
                                                       accountsObject,
                                                       groupObject,
                                                       yearsObject,
                                                       accountNameValue,
                                                       entityNameValue,
                                                       yearValue,
                                                       accountOrderNumberValue,
                                                       groupOrderNumberValue,
                                                       accountTypeValue,
                                                       groupNameValue,
                                                       groupValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a FiscalYearAccount based on a result set that must
   * contain the FiscalYearAccount primary key columns. The method creates a
   * primary key of a type specified by the primary key stereotype on the
   * persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>AssociationKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a FiscalYearAccount AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getFiscalYearAccountPrimaryKey(ResultSet rs,
                                                           String prefix)
      throws SQLException, InvalidParametersException {
    return getFiscalYearAccountPrimaryKey(rs.getString("accountName"),
                                          rs.getString("entityName"),
                                          rs.getInt("year"));
  }

  /**
   * <p>
   * Get a primary key for a FiscalYearAccount based on input key attributes.
   * The method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>AssociationKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountName Attribute that is part of the association key
   * @param entityName Attribute that is part of the association key
   * @param year Attribute that is part of the association key
   * @return a FiscalYearAccount AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getFiscalYearAccountPrimaryKey(java.lang.String accountName,
                                                           java.lang.String entityName,
                                                           java.lang.Integer year)
      throws InvalidParametersException {
    // Track whether any input keys are null.
    boolean noNulls = true;

    // Associated key: accounts with type CompositeKey
    IPrimaryKey accountsKey = getAccountPrimaryKey(accountName, entityName);
    if (accountsKey == null) {
      noNulls = false;
    }

    // Associated key: years with type NaturalKey
    IPrimaryKey yearsKey = getFiscalYearPrimaryKey(year);
    if (yearsKey == null) {
      noNulls = false;
    }

    IPrimaryKey key = null;
    if (noNulls) {
      java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
      list.add(accountsKey);
      list.add(yearsKey);
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list,
                                                                "com.poesys.accounting.db.account.FiscalYearAccount");
    }
    return key;
  }

  /**
   * Retrieve the Account data from the result set's current row and create a
   * Account object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a Account instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAccount getAccountData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument description gets the JDBC value with a function
    // call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument debitDefault gets the JDBC value with a function
    // call.
    java.lang.Boolean debitDefaultValue = rs.getBoolean("debitDefault");
    // Constructor argument active gets the JDBC value with a function call.
    java.lang.Boolean activeValue = rs.getBoolean("active");
    // Account has lazily loaded members or is a lazily loaded association
    // class, so create a Proxy.
    IAccount newObject =
      new AccountProxy(new Account(key,
                                   entityNameValue,
                                   accountNameValue,
                                   descriptionValue,
                                   debitDefaultValue,
                                   activeValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a Account based on a result set that must contain the
   * Account primary key columns. The method creates a primary key of a type
   * specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a Account CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getEntityPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String accountNameValue = rs.getString("accountName");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "accountName",
                                                     accountNameValue));
    IPrimaryKey subKey =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.account.Account");
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey,
                                                            subKey,
                                                            "com.poesys.accounting.db.account.Account");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Account based on input key attributes. The method
   * creates a primary key of a type specified by the primary key stereotype on
   * the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountName the account name; unique within the entity
   * @param entityName composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @return a Account CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountPrimaryKey(java.lang.String accountName,
                                                 java.lang.String entityName)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getEntityPrimaryKey(entityName);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("accountName",
                                                       accountName));
      IPrimaryKey subKey =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.Account");
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey,
                                                              subKey,
                                                              "com.poesys.accounting.db.account.Account");
    }
    return key;
  }

  /**
   * Retrieve the AccountGroup data from the result set's current row and create
   * a AccountGroup object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a AccountGroup instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAccountGroup getAccountGroupData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accountType gets the JDBC value with a function
    // call.
    java.lang.String accountTypeValue = rs.getString("accountType");
    // Constructor argument groupName gets the JDBC value with a function call.
    java.lang.String groupNameValue = rs.getString("groupName");
    // AccountGroup has no lazily loaded members, so there is no need for Proxy.
    IAccountGroup newObject =
      new AccountGroup(key, accountTypeValue, groupNameValue);
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a AccountGroup based on a result set that must
   * contain the AccountGroup primary key columns. The method creates a primary
   * key of a type specified by the primary key stereotype on the persistent
   * class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a AccountGroup CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountGroupPrimaryKey(ResultSet rs,
                                                      String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key =
      getAccountGroupPrimaryKey(rs.getString("accountType"),
                                rs.getString("groupName"));
    return key;
  }

  /**
   * <p>
   * Get a primary key for a AccountGroup based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>CompositeKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountType composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @param groupName the name of the account group within the account type
   * @return a AccountGroup CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountGroupPrimaryKey(java.lang.String accountType,
                                                      java.lang.String groupName)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getAccountTypePrimaryKey(accountType);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("groupName", groupName));
      IPrimaryKey subKey =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.AccountGroup");
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey,
                                                              subKey,
                                                              "com.poesys.accounting.db.account.AccountGroup");
    }
    return key;
  }

  /**
   * Retrieve the Entity data from the result set's current row and create a
   * Entity object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a Entity instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IEntity getEntityData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Entity has no lazily loaded members, so there is no need for Proxy.
    IEntity newObject = new Entity(key, entityNameValue);
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a Entity based on a result set that must contain the
   * Entity primary key columns. The method creates a primary key of a type
   * specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a Entity NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getEntityPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String entityNameValue = rs.getString("entityName");

    list.add(new com.poesys.db.col.StringColumnValue(prefix + "entityName",
                                                     entityNameValue));
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.account.Entity");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Entity based on input key attributes. The method
   * creates a primary key of a type specified by the primary key stereotype on
   * the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param entityName the name of the accounting entity; unique among all
   *          entities
   * @return a Entity NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getEntityPrimaryKey(java.lang.String entityName)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (entityName != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("entityName", entityName));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.Entity");
    }
    return key;
  }

  /**
   * Retrieve the CapitalEntity data from the result set's current row and
   * create a CapitalEntity object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a CapitalEntity instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICapitalEntity getCapitalEntityData(IPrimaryKey key,
                                                    ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument capitalEntityName gets the JDBC value with a
    // function call.
    java.lang.String capitalEntityNameValue = rs.getString("capitalEntityName");
    // CapitalEntity has no lazily loaded members, so there is no need for
    // Proxy.
    ICapitalEntity newObject = new CapitalEntity(key, capitalEntityNameValue);
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a CapitalEntity based on a result set that must
   * contain the CapitalEntity primary key columns. The method creates a primary
   * key of a type specified by the primary key stereotype on the persistent
   * class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a CapitalEntity NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCapitalEntityPrimaryKey(ResultSet rs,
                                                       String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String capitalEntityNameValue = rs.getString("capitalEntityName");

    list.add(new com.poesys.db.col.StringColumnValue(prefix
                                                         + "capitalEntityName",
                                                     capitalEntityNameValue));
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.account.CapitalEntity");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CapitalEntity based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param capitalEntityName
   * @return a CapitalEntity NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCapitalEntityPrimaryKey(java.lang.String capitalEntityName)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (capitalEntityName != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("capitalEntityName",
                                                       capitalEntityName));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.CapitalEntity");
    }
    return key;
  }

  /**
   * Retrieve the AccountType data from the result set's current row and create
   * a AccountType object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a AccountType instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAccountType getAccountTypeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accountType gets the JDBC value with a function
    // call.
    java.lang.String accountTypeValue = rs.getString("accountType");
    // AccountType has no lazily loaded members, so there is no need for Proxy.
    IAccountType newObject = new AccountType(key, accountTypeValue);
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a AccountType based on a result set that must contain
   * the AccountType primary key columns. The method creates a primary key of a
   * type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a AccountType NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountTypePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String accountTypeValue = rs.getString("accountType");

    list.add(new com.poesys.db.col.StringColumnValue(prefix + "accountType",
                                                     accountTypeValue));
    key =
      com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                          "com.poesys.accounting.db.account.AccountType");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a AccountType based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>NaturalKey</li>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountType the account type name (Assets, Liabilities, Equity,
   *          Income, Expense)
   * @return a AccountType NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccountTypePrimaryKey(java.lang.String accountType)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (accountType != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("accountType",
                                                       accountType));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key =
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list,
                                                            "com.poesys.accounting.db.account.AccountType");
    }
    return key;
  }

  /**
   * Retrieve the CapitalAccount data from the result set's current row and
   * create a CapitalAccount object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a CapitalAccount instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICapitalAccount getCapitalAccountData(IPrimaryKey key,
                                                      ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Constructor argument description gets the JDBC value with a function
    // call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument debitDefault gets the JDBC value with a function
    // call.
    java.lang.Boolean debitDefaultValue = rs.getBoolean("debitDefault");
    // Constructor argument active gets the JDBC value with a function call.
    java.lang.Boolean activeValue = rs.getBoolean("active");
    // Constructor argument ownership gets the JDBC value with a function call.
    java.lang.Double ownershipValue = rs.getDouble("ownership");
    // Constructor argument capitalEntityName gets the JDBC value with a
    // function call.
    java.lang.String capitalEntityNameValue = rs.getString("capitalEntityName");
    // CapitalAccount has lazily loaded members or is a lazily loaded
    // association class, so create a Proxy.
    ICapitalAccount newObject =
      new CapitalAccountProxy(new CapitalAccount(key,
                                                 accountNameValue,
                                                 entityNameValue,
                                                 descriptionValue,
                                                 debitDefaultValue,
                                                 activeValue,
                                                 ownershipValue,
                                                 capitalEntityNameValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a CapitalAccount based on a result set that must
   * contain the CapitalAccount primary key columns. The method creates a
   * primary key of a type specified by the primary key stereotype on the
   * persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a CapitalAccount None primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCapitalAccountPrimaryKey(ResultSet rs,
                                                        String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Account
    // superclass subsystem Account
    key =
      com.poesys.accounting.db.account.AccountFactory.getAccountPrimaryKey(rs,
                                                                           "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a CapitalAccount based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountName the account name; unique within the entity
   * @param entityName composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @return a CapitalAccount None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCapitalAccountPrimaryKey(java.lang.String accountName,
                                                        java.lang.String entityName)
      throws InvalidParametersException {
    return getAccountPrimaryKey(accountName, entityName);
  }

  /**
   * Retrieve the DistributionAccount data from the result set's current row and
   * create a DistributionAccount object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a DistributionAccount instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IDistributionAccount getDistributionAccountData(IPrimaryKey key,
                                                                ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Constructor argument description gets the JDBC value with a function
    // call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument debitDefault gets the JDBC value with a function
    // call.
    java.lang.Boolean debitDefaultValue = rs.getBoolean("debitDefault");
    // Constructor argument active gets the JDBC value with a function call.
    java.lang.Boolean activeValue = rs.getBoolean("active");
    // Constructor argument capitalEntityName gets the JDBC value with a
    // function call.
    java.lang.String capitalEntityNameValue = rs.getString("capitalEntityName");
    // DistributionAccount has lazily loaded members or is a lazily loaded
    // association class, so create a Proxy.
    IDistributionAccount newObject =
      new DistributionAccountProxy(new DistributionAccount(key,
                                                           accountNameValue,
                                                           entityNameValue,
                                                           descriptionValue,
                                                           debitDefaultValue,
                                                           activeValue,
                                                           capitalEntityNameValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a DistributionAccount based on a result set that must
   * contain the DistributionAccount primary key columns. The method creates a
   * primary key of a type specified by the primary key stereotype on the
   * persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a DistributionAccount None primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getDistributionAccountPrimaryKey(ResultSet rs,
                                                             String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Account
    // superclass subsystem Account
    key =
      com.poesys.accounting.db.account.AccountFactory.getAccountPrimaryKey(rs,
                                                                           "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a DistributionAccount based on input key attributes.
   * The method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountName the account name; unique within the entity
   * @param entityName composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @return a DistributionAccount None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getDistributionAccountPrimaryKey(java.lang.String accountName,
                                                             java.lang.String entityName)
      throws InvalidParametersException {
    return getAccountPrimaryKey(accountName, entityName);
  }

  /**
   * Retrieve the SimpleAccount data from the result set's current row and
   * create a SimpleAccount object.
   * 
   * @param key the primary key for the Account
   * @param rs the query result set
   * @return a SimpleAccount instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISimpleAccount getSimpleAccountData(IPrimaryKey key,
                                                    ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accountName gets the JDBC value with a function
    // call.
    java.lang.String accountNameValue = rs.getString("accountName");
    // Constructor argument entityName gets the JDBC value with a function call.
    java.lang.String entityNameValue = rs.getString("entityName");
    // Constructor argument description gets the JDBC value with a function
    // call.
    java.lang.String descriptionValue = rs.getString("description");
    // Constructor argument debitDefault gets the JDBC value with a function
    // call.
    java.lang.Boolean debitDefaultValue = rs.getBoolean("debitDefault");
    // Constructor argument active gets the JDBC value with a function call.
    java.lang.Boolean activeValue = rs.getBoolean("active");
    // Constructor argument receivable gets the JDBC value with a function call.
    java.lang.Boolean receivableValue = rs.getBoolean("receivable");
    // SimpleAccount has lazily loaded members or is a lazily loaded association
    // class, so create a Proxy.
    ISimpleAccount newObject =
      new SimpleAccountProxy(new SimpleAccount(key,
                                               accountNameValue,
                                               entityNameValue,
                                               descriptionValue,
                                               debitDefaultValue,
                                               activeValue,
                                               receivableValue));
    return newObject;
  }

  /**
   * <p>
   * Get a primary key for a SimpleAccount based on a result set that must
   * contain the SimpleAccount primary key columns. The method creates a primary
   * key of a type specified by the primary key stereotype on the persistent
   * class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in
   *          associations
   * @return a SimpleAccount None primary key
   * @throws SQLException when there is a problem getting data from the result
   *           set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSimpleAccountPrimaryKey(ResultSet rs,
                                                       String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    // Superclass: $class.superclass.name
    // superclass Account
    // superclass subsystem Account
    key =
      com.poesys.accounting.db.account.AccountFactory.getAccountPrimaryKey(rs,
                                                                           "");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SimpleAccount based on input key attributes. The
   * method creates a primary key of a type specified by the primary key
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   * <li>Persistent</li>
   * </ul>
   * 
   * @param accountName the account name; unique within the entity
   * @param entityName composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @return a SimpleAccount None primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSimpleAccountPrimaryKey(java.lang.String accountName,
                                                       java.lang.String entityName)
      throws InvalidParametersException {
    return getAccountPrimaryKey(accountName, entityName);
  }
}