/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

/**
 * <p>
 * A data-access layer data-transfer object for the DistributionAccount. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractDistributionAccount extends com.poesys.accounting.db.account.Account implements IDistributionAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractDistributionAccount.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractDistributionAccount> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractDistributionAccount>();

  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the capitalEntity association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryCapitalEntitySetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.accounting.db.account.ICapitalEntity> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryCapitalEntitySetter object.
     */
    public QueryCapitalEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.CapitalEntity.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return capitalEntityKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.ICapitalEntity> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryCapitalEntity();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.ICapitalEntity dto) {
      // No status change, this is just filling in the object data.
      capitalEntity = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated capitalEntity is not null
      return capitalEntity != null;
    }
  }

  /**
   * Post-process setter for post-processing nested object property capitalEntity.
   */
  private class PostProcessCapitalEntitySetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property capitalEntity source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessCapitalEntitySetter object.
     */
    public PostProcessCapitalEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.CapitalEntity.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (capitalEntity != null) {
        array.add(capitalEntity);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested object property capitalEntity.
   */
  private class InsertCapitalEntitySetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property capitalEntity source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertCapitalEntitySetter object.
     */
    public InsertCapitalEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.CapitalEntity.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(capitalEntity);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Setter for processing added capitalEntity, updated capitalEntity, and 
   * deleted capitalEntity. 
   */
   
  private class UpdateCapitalEntitySetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.accounting.db.account.ICapitalEntity> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateCapitalEntitySetter object.
     */
    public UpdateCapitalEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(com.poesys.accounting.db.account.ICapitalEntity dto) {
        // capitalEntity source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.ICapitalEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.CapitalEntity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<com.poesys.accounting.db.account.ICapitalEntity> updater = 
        factory.getUpdate(new com.poesys.accounting.db.account.sql.UpdateCapitalEntity());

      updater.update(dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(com.poesys.accounting.db.account.ICapitalEntity dto) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.ICapitalEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.CapitalEntity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.accounting.db.account.ICapitalEntity> dao = 
        factory.getDelete(new com.poesys.accounting.db.account.sql.DeleteCapitalEntity());
      dao.delete(dto);
    }

    @Override
    protected void doNew(com.poesys.accounting.db.account.ICapitalEntity dto) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.ICapitalEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.CapitalEntity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.accounting.db.account.ICapitalEntity> inserter =
        factory.getInsert(new com.poesys.accounting.db.account.sql.InsertCapitalEntity(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(dto);
    }

    @Override
    protected com.poesys.accounting.db.account.ICapitalEntity getDto() {
      return capitalEntity;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.CapitalEntity.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryCapitalEntitySetter nested class to query object
   */
  private IPrimaryKey capitalEntityKey;
  
  /**
   * Set the foreign key capitalEntityKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param capitalEntityKey the foreign key
   */
  void setCapitalEntityKey(IPrimaryKey capitalEntityKey) {
    this.capitalEntityKey = capitalEntityKey;
  }


  /**
   * Create an empty DistributionAccount for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractDistributionAccount() {
    super();
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the capitalEntity property.
    querySetters.add(new QueryCapitalEntitySetter());
    preSetters.add(new InsertCapitalEntitySetter());
    postSetters.add(new UpdateCapitalEntitySetter());
    postProcessSetters.add(new PostProcessCapitalEntitySetter());
  }

  /**
   * Create a DistributionAccount. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the DistributionAccount
   * @param accountName the account name; unique within the entity
   * @param entityName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param description text description of the nature of the account
   * @param debitDefault whether the account transaction items default to a debit or credit item; chosen
as the "usual" value for items in this account
   * @param active whether the account is active at the present time; an inactive account does not
appear in lists of accounts available through the user interface but does appear
in reports where referenced by items
   * @param capitalEntityName foreign key used by setter to query associated object
   */
  public AbstractDistributionAccount(IPrimaryKey key, java.lang.String accountName, java.lang.String entityName, java.lang.String description, java.lang.Boolean debitDefault, java.lang.Boolean active, java.lang.String capitalEntityName) {
    super(key, entityName, accountName, description, debitDefault, active);

    this.capitalEntityName = capitalEntityName;

    if (capitalEntityName == null) {
      throw new com.poesys.db.InvalidParametersException("capitalEntityName is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the capitalEntity property.
    querySetters.add(new QueryCapitalEntitySetter());
    // Set the object property primary key with a factory method.
    capitalEntityKey = com.poesys.accounting.db.account.AccountFactory.getCapitalEntityPrimaryKey(capitalEntityName);
    insertSetters.add(new InsertCapitalEntitySetter());
    preSetters.add(new InsertCapitalEntitySetter());
    postSetters.add(new UpdateCapitalEntitySetter());
    postProcessSetters.add(new PostProcessCapitalEntitySetter());
    
    // Add a setter to instantiate the required capitalEntity object before insert.
    insertQuerySetters.add(new QueryCapitalEntitySetter());
    abstractClass = false;
    createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractDistributionAccount");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  /**
   * Nested property capitalEntity
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.accounting.db.account.ICapitalEntity capitalEntity;
  
  /**
   * Get an object of com.poesys.accounting.db.account.ICapitalEntity.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a com.poesys.accounting.db.account.ICapitalEntity
   */

  public com.poesys.accounting.db.account.ICapitalEntity getCapitalEntity() {
    return capitalEntity;
  }

  /**
   * Clear the capitalEntity data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCapitalEntity() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the capitalEntity.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param capitalEntity the value with which to set the property
   */
  public void setCapitalEntity(com.poesys.accounting.db.account.ICapitalEntity capitalEntity)
      throws com.poesys.db.InvalidParametersException {
    if (capitalEntity == null) {
      throw new com.poesys.db.InvalidParametersException("capitalEntity is required");
    }
    
    this.capitalEntity = capitalEntity;
    setChanged();
  }
  /**
   * Nested property capitalEntityName
   *
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddToOneAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String capitalEntityName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties + AddToOneAssociationAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getCapitalEntityName() {
    return capitalEntityName;
  }

  /**
   * Clear the capitalEntityName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCapitalEntityName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the capitalEntityName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * @param capitalEntityName the value with which to set the property
   */
  void setCapitalEntityName(java.lang.String capitalEntityName)
      throws com.poesys.db.InvalidParametersException {
    if (capitalEntityName == null) {
      throw new com.poesys.db.InvalidParametersException("capitalEntityName is required");
    }
    
    this.capitalEntityName = capitalEntityName;
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {
  }

  /**
   * Create the inserters for the DistributionAccount and its superclasses.
   */
  protected void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IDistributionAccount> distributionAccountFactory =
      manager.getFactory("com.poesys.accounting.db.account.DistributionAccount",
                         getSubsystem(),
                         2147483647);
    super.createInserters();
    com.poesys.db.dao.insert.IInsertSql<IDistributionAccount> sql =
      new com.poesys.accounting.db.account.sql.InsertDistributionAccount();
    com.poesys.db.dao.insert.IInsert<IDistributionAccount> inserter =
      distributionAccountFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}