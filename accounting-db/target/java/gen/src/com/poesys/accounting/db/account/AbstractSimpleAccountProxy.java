/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * SimpleAccount. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * 
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSimpleAccountProxy extends AbstractLazyLoadingDtoProxy implements ISimpleAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractSimpleAccountProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractSimpleAccountProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractSimpleAccountProxy>();
  
  /**
   * Create a SimpleAccountProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractSimpleAccountProxy(SimpleAccount dto) {
    super(dto);


    // Add query setters for single-object deserialization.
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractSimpleAccountProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractSimpleAccountProxy otherProxy = (AbstractSimpleAccountProxy)obj;
    return ((SimpleAccount)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((SimpleAccount)dto).hashCode();
  }
  // Inherited properties

  public java.lang.String getAccountName() {
    return ((ISimpleAccount)dto).getAccountName();
  }

  public java.lang.String getEntityName() {
    return ((ISimpleAccount)dto).getEntityName();
  }

  public com.poesys.accounting.db.account.IEntity getEntity() {
    return ((ISimpleAccount)dto).getEntity();
  }

  /**
   * Set the property entity.
   * 
   * @param entity the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setEntity(com.poesys.accounting.db.account.IEntity entity)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setEntity(entity);
  }

  /** Flag indicating whether the years property has been loaded */
  transient boolean yearsLoaded = false;

  /**
   * Query setter for lazily querying nested years collection
   * (inherited to-many property)
   *
   * Source: AddInheritedToManyAssociationProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryYearsByAccount
   */
  private class QueryYearsSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IFiscalYear, com.poesys.accounting.db.account.IAccount, java.util.Collection<com.poesys.accounting.db.account.IFiscalYear>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 100;

    /**
     * Create a QueryYearsSetter object.
     */
    public QueryYearsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISimpleAccount getParametersDto() {
      return AbstractSimpleAccountProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYear, com.poesys.accounting.db.account.IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryYearsByAccount();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IFiscalYear child : collection) {
          child.attach(AbstractSimpleAccountProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractSimpleAccountProxy.this.dto, 
                       com.poesys.db.dao.DataEvent.DELETE);
        }
        setFiscalYear(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded years
      return yearsLoaded;
    }
  }

  /**
   * Add an com.poesys.accounting.db.account.IFiscalYear object to the Years collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #2 (inherited property)
   *
   * Source: AddInheritedToManyAssociationProperties
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYear object to add to the collection
   */
  public void addYearsFiscalYear(com.poesys.accounting.db.account.IFiscalYear object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!yearsLoaded) {
      getYears();
    }
    ((SimpleAccount)dto).addYearsFiscalYear(object);
  }


  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYear objects, lazily loading the
   * yearsLoaded association if not already in memory
   * 
   * @return a collection of com.poesys.accounting.db.account.IFiscalYear objects
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> getYears() {
    // Lazy-load the inherited years from the SimpleAccount 
    // if not loaded and the inherited key is not null.
    if (!yearsLoaded && ((ISimpleAccount)dto).getAccountName() != null && ((ISimpleAccount)dto).getEntityName() != null) {
      com.poesys.db.dto.ISet setter = new QueryYearsSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      yearsLoaded = true;
    }
    return ((ISimpleAccount)dto).getYears();
  }

  /**
   * Clear the lazily-loaded property years.
   */
  public void clearYears() {
    // Only clear if loaded already.
    if (yearsLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((SimpleAccount)dto).setFiscalYear(null);
        ((SimpleAccount)dto).undoStatus();
        yearsLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the lazily loaded property years and mark it loaded.
   * 
   * @param years the value for the lazily loaded property
   */
  public void setFiscalYear(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years)
      {
    ((SimpleAccount)dto).setFiscalYear(years);
    
    // Mark the property loaded and undo the status change if loading.
    if (!yearsLoaded) {
      dto.undoStatus();
      yearsLoaded = true;
    }
  }

  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems() {
    return ((ISimpleAccount)dto).getItems();
  }

  /**
   * Set the property items.
   * 
   * @param items the value for the property
   */
  public void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items)
      {
    ((SimpleAccount)dto).setItems(items);
  }
// Adding add method here

  /**
   * Add an com.poesys.accounting.db.transaction.IItem object to the items collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #3 (inherited to-many)
   *
   * Source: AddInheritedToManyAssociationProperties
   * 
   * @param object the com.poesys.accounting.db.transaction.IItem object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object) {
    ((SimpleAccount)dto).addItemsItem(object);
  }

  /** Flag indicating whether the fiscalYearAccount property has been loaded */
  transient boolean fiscalYearAccountLoaded = false;

  /**
   * Query setter for lazily querying nested fiscalYearAccount collection
   * (inherited to-many property)
   *
   * Source: AddInheritedAssociationClassCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByAccount
   */
  private class QueryFiscalYearAccountSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<com.poesys.accounting.db.account.IFiscalYearAccount, com.poesys.accounting.db.account.IAccount, java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryFiscalYearAccountSetter object.
     */
    public QueryFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISimpleAccount getParametersDto() {
      return AbstractSimpleAccountProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYearAccount, com.poesys.accounting.db.account.IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryFiscalYearAccountByAccount();
    }

    @Override
    protected void set(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> collection) {
      try {
        // Register the observer parent with the subject children.
        for (com.poesys.accounting.db.account.IFiscalYearAccount child : collection) {
          child.attach(AbstractSimpleAccountProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractSimpleAccountProxy.this.dto, 
                       com.poesys.db.dao.DataEvent.DELETE);
        }
        setFiscalYearAccount(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has lazily loaded fiscalYearAccount
      return fiscalYearAccountLoaded;
    }
  }

  /**
   * Add an com.poesys.accounting.db.account.IFiscalYearAccount object to the FiscalYearAccount collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #2 (inherited property)
   *
   * Source: AddInheritedAssociationClassCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYearAccount object to add to the collection
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object) {
    // Collection is lazily loaded, check and load if necessary.
    if (!fiscalYearAccountLoaded) {
      getFiscalYearAccount();
    }
    ((SimpleAccount)dto).addFiscalYearAccountFiscalYearAccount(object);
  }


  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYearAccount objects, lazily loading the
   * fiscalYearAccountLoaded association if not already in memory
   * 
   * @return a collection of com.poesys.accounting.db.account.IFiscalYearAccount objects
   */
  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount() {
    // Lazy-load the inherited fiscalYearAccount from the SimpleAccount 
    // if not loaded and the inherited key is not null.
    if (!fiscalYearAccountLoaded && ((ISimpleAccount)dto).getAccountName() != null && ((ISimpleAccount)dto).getEntityName() != null) {
      com.poesys.db.dto.ISet setter = new QueryFiscalYearAccountSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      fiscalYearAccountLoaded = true;
    }
    return ((ISimpleAccount)dto).getFiscalYearAccount();
  }

  /**
   * Clear the lazily-loaded property fiscalYearAccount.
   */
  public void clearFiscalYearAccount() {
    // Only clear if loaded already.
    if (fiscalYearAccountLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((SimpleAccount)dto).setFiscalYearAccount(null);
        ((SimpleAccount)dto).undoStatus();
        fiscalYearAccountLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the lazily loaded property fiscalYearAccount and mark it loaded.
   * 
   * @param fiscalYearAccount the value for the lazily loaded property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setFiscalYearAccount(fiscalYearAccount);
    
    // Mark the property loaded and undo the status change if loading.
    if (!fiscalYearAccountLoaded) {
      dto.undoStatus();
      fiscalYearAccountLoaded = true;
    }
  }

  public java.lang.String getDescription() {
    return ((ISimpleAccount)dto).getDescription();
  }

  /**
   * Set the property description.
   * 
   * @param description the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDescription(java.lang.String description)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setDescription(description);
  }

  public java.lang.Boolean getDebitDefault() {
    return ((ISimpleAccount)dto).getDebitDefault();
  }

  /**
   * Set the property debitDefault.
   * 
   * @param debitDefault the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDebitDefault(java.lang.Boolean debitDefault)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setDebitDefault(debitDefault);
  }

  public java.lang.Boolean getActive() {
    return ((ISimpleAccount)dto).getActive();
  }

  /**
   * Set the property active.
   * 
   * @param active the value for the property
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setActive(java.lang.Boolean active)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setActive(active);
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getReceivable() {
    return ((SimpleAccount)dto).getReceivable();
  }

  /**
   * Set the receivable from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param receivable the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setReceivable(java.lang.Boolean receivable)
      throws com.poesys.db.InvalidParametersException {
    ((SimpleAccount)dto).setReceivable(receivable);
  }

  public void markChildrenDeleted() {
  	((SimpleAccount)dto).markChildrenDeleted();
  }
}