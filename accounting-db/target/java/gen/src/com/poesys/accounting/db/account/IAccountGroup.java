/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package com.poesys.accounting.db.account;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the AccountGroup. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * A named group of accounts, grouping the accounts for presentation and
 * aggregation in financial statements
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>NaturalKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface IAccountGroup extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   */
  void markChildrenDeleted();

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * the name of the group of accounts; examples: Cash, Fixed Assets, Accounts
   * Payable, Tax-Related Expenses
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: groupName
   * </p>
   * @return a java.lang.String groupName
   */
  public java.lang.String getGroupName();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: false

  /**
   * <p>
   * the set of accounts in the group
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Owning DTO: Account
   * Owning package: com.poesys.accounting.db.account
   * Property prefix: accounts
   * </p>
   * @return a java.util.Collection<com.poesys.accounting.db.account.IAccount> accounts
   */
  public java.util.Collection<com.poesys.accounting.db.account.IAccount> getAccounts();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the accounts.
   * </p>
   *
   * @param accounts the value to set into the accounts
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setAccounts(java.util.Collection<com.poesys.accounting.db.account.IAccount> accounts) ;


  /**
   * Add a Account object to the accounts collection.
   *
   * @param object the object to add to the collection
   */
  public void addAccountsAccount(com.poesys.accounting.db.account.IAccount object);
}