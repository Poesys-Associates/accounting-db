/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl

package com.poesys.accounting.bs.transaction;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;

import com.poesys.accounting.db.transaction.IItem;
import com.poesys.accounting.db.transaction.ItemProxy;
import com.poesys.accounting.db.transaction.Item;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Item. This class is an
 * abstract class that contains AndroMDA generated code; change nothing in this
 * class. Instead, override any methods in the concrete subclass generated in
 * the same package. AndroMDA will overwrite this class each time you run it but
 * will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A specific amount of value associated with a specific account within a
 * transaction parent; the item debits and credits must cancel each other out
 * for the set of all items belonging to the transaction (the transaction must
 * "balance"); the transaction orders the set of items according to an integer
 * order number, which is part of the primary key
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 * <li>CompositeKey</li>
 * <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsItem extends
    AbstractDto<com.poesys.accounting.db.transaction.IItem> {

  /**
   * A Collection builder helper class for building a business-layer Collection
   * of BsItem objects from a Collection reimbursingItems of data-access-layer
   * com.poesys.accounting.db.transaction.IItem objects
   */
  private class BsReimbursingItemsCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.transaction.IItem, com.poesys.accounting.bs.transaction.BsItem> {
    @Override
    public com.poesys.accounting.bs.transaction.BsItem get(com.poesys.accounting.db.transaction.IItem dto) {
      return new com.poesys.accounting.bs.transaction.BsItem(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer
   * Collection of Item objects from an input Collection reimbursingItems of
   * business-layer BsItem objects
   */
  private class ReimbursingItemsCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.transaction.BsItem, com.poesys.accounting.db.transaction.IItem> {
    @Override
    public com.poesys.accounting.db.transaction.IItem get(com.poesys.accounting.bs.transaction.BsItem dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection
   * of BsItem objects from a Collection receivables of data-access-layer
   * com.poesys.accounting.db.transaction.IItem objects
   */
  private class BsReceivablesCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.transaction.IItem, com.poesys.accounting.bs.transaction.BsItem> {
    @Override
    public com.poesys.accounting.bs.transaction.BsItem get(com.poesys.accounting.db.transaction.IItem dto) {
      return new com.poesys.accounting.bs.transaction.BsItem(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer
   * Collection of Item objects from an input Collection receivables of
   * business-layer BsItem objects
   */
  private class ReceivablesCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.transaction.BsItem, com.poesys.accounting.db.transaction.IItem> {
    @Override
    public com.poesys.accounting.db.transaction.IItem get(com.poesys.accounting.bs.transaction.BsItem dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection
   * of BsReimbursement objects from a Collection reimbursements of
   * data-access-layer com.poesys.accounting.db.transaction.IReimbursement
   * objects
   */
  private class BsReimbursementsCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.db.transaction.IReimbursement, com.poesys.accounting.bs.transaction.BsReimbursement> {
    @Override
    public com.poesys.accounting.bs.transaction.BsReimbursement get(com.poesys.accounting.db.transaction.IReimbursement dto) {
      return new com.poesys.accounting.bs.transaction.BsReimbursement(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer
   * Collection of Reimbursement objects from an input Collection reimbursements
   * of business-layer BsReimbursement objects
   */
  private class ReimbursementsCollectionBuilder
      extends
      com.poesys.bs.dto.CollectionBuilder<com.poesys.accounting.bs.transaction.BsReimbursement, com.poesys.accounting.db.transaction.IReimbursement> {
    @Override
    public com.poesys.accounting.db.transaction.IReimbursement get(com.poesys.accounting.bs.transaction.BsReimbursement dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsItem object from an Item object.
   * 
   * @param dto the data-access layer Item DTO
   * @throws DelegateException when there is a problem creating the Item
   */
  public AbstractBsItem(IItem dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create an Item from new data.
   *
   * @param key the primary key of the Item
   * @param transactionId composite super-key attribute that uniquely identifies
   *          child combined with child sub-key and any other parent super-keys
   * @param orderNumber
   * @param amount the monetary amount in dollars of the transaction item
   * @param debit whether the item is a debit (true) or credit (false); default
   *          value is the debit-default value of the account
   * @param checked whether the value and details of the transaction item have
   *          been verified and reconciled
   * @param accountName foreign key used by setter to query associated object
   * @param entityName foreign key used by setter to query associated object
   */
  public AbstractBsItem(IPrimaryKey key,
                        java.math.BigInteger transactionId,
                        java.lang.Integer orderNumber,
                        java.lang.Double amount,
                        java.lang.Boolean debit,
                        java.lang.Boolean checked,
                        java.lang.String accountName,
                        java.lang.String entityName) {
    super(new ItemProxy(new Item(key,
                                 transactionId,
                                 orderNumber,
                                 amount,
                                 debit,
                                 checked,
                                 accountName,
                                 entityName)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IItem> other = (IDto<IItem>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  @Override
  public int compareTo(IDto<IItem> o) {
    return dto.compareTo(o.toDto());
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with
   * child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.math.BigInteger transactionId
   */
  public java.math.BigInteger getTransactionId() {
    return dto.getTransactionId();
  }

  /**
   * 
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data
   * member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.Integer orderNumber
   */
  public java.lang.Integer getOrderNumber() {
    return dto.getOrderNumber();
  }

  /**
   * <p>
   * the monetary amount in dollars of the transaction item
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.Double amount
   */
  public java.lang.Double getAmount() {
    return dto.getAmount();
  }

  /**
   * <p>
   * Set the amount.
   * </p>
   * <p>
   * the monetary amount in dollars of the transaction item
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param amount the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter amount is null
   */
  public void setAmount(java.lang.Double amount)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    dto.setAmount(amount);
  }

  /**
   * <p>
   * whether the item is a debit (true) or credit (false); default value is the
   * debit-default value of the account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.Boolean debit
   */
  public java.lang.Boolean getDebit() {
    return dto.getDebit();
  }

  /**
   * <p>
   * Set the debit.
   * </p>
   * <p>
   * whether the item is a debit (true) or credit (false); default value is the
   * debit-default value of the account
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param debit the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter debit is null
   */
  public void setDebit(java.lang.Boolean debit)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    dto.setDebit(debit);
  }

  /**
   * <p>
   * whether the value and details of the transaction item have been verified
   * and reconciled
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.Boolean checked
   */
  public java.lang.Boolean getChecked() {
    return dto.getChecked();
  }

  /**
   * <p>
   * Set the checked.
   * </p>
   * <p>
   * whether the value and details of the transaction item have been verified
   * and reconciled
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param checked the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter checked is null
   */
  public void setChecked(java.lang.Boolean checked)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    dto.setChecked(checked);
  }

  /**
   * <p>
   * the transaction that owns the item (the parent)
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a com.poesys.accounting.bs.transaction.BsTransaction transaction
   */
  public com.poesys.accounting.bs.transaction.BsTransaction getTransaction() {
    // Return 4
    return new com.poesys.accounting.bs.transaction.BsTransaction(dto.getTransaction());
  }

  /**
   * <p>
   * Set the transaction.
   * </p>
   * <p>
   * the transaction that owns the item (the parent)
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param transaction the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter transaction is null
   */
  public void setTransaction(com.poesys.accounting.bs.transaction.BsTransaction transaction)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    dto.setTransaction(transaction == null ? null : transaction.toDto());
  }

  /**
   * <p>
   * the account to which to associate the flow of funds for the item
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a com.poesys.accounting.bs.account.BsAccount account
   */
  public com.poesys.accounting.bs.account.BsAccount getAccount() {
    // Return 4
    return new com.poesys.accounting.bs.account.BsAccount(dto.getAccount());
  }

  /**
   * <p>
   * Set the account.
   * </p>
   * <p>
   * the account to which to associate the flow of funds for the item
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param account the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter account is null
   */
  public void setAccount(com.poesys.accounting.bs.account.BsAccount account)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    dto.setAccount(account == null ? null : account.toDto());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass +
   * AddToOneAssociationAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.String accountName
   */
  public java.lang.String getAccountName() {
    // Return 3
    return dto.getAccountName();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes +
   * AddToOneAssociationAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a java.lang.String entityName
   */
  public java.lang.String getEntityName() {
    // Return 3
    return dto.getEntityName();
  }

  /**
   * <p>
   * the set of reimbursing items
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as
   * data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsItem object.
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a com.poesys.accounting.bs.transaction.BsItem entityName
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public java.util.Collection<com.poesys.accounting.bs.transaction.BsItem> getReimbursingItems()
      throws java.sql.SQLException {
    BsReimbursingItemsCollectionBuilder builder =
      new BsReimbursingItemsCollectionBuilder();
    return builder.getCollection(dto.getReimbursingItems());
  }

  /**
   * <p>
   * the set of receivable items
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as
   * data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsItem object.
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a com.poesys.accounting.bs.transaction.BsItem entityName
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public java.util.Collection<com.poesys.accounting.bs.transaction.BsItem> getReceivables()
      throws java.sql.SQLException {
    BsReceivablesCollectionBuilder builder =
      new BsReceivablesCollectionBuilder();
    return builder.getCollection(dto.getReceivables());
  }

  /**
   * <p>
   * Set the reimbursingItems collection.
   * </p>
   * <p>
   * the set of reimbursed items
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param items the reimbursing items collection to set
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   */
  public void setReimbursingItems(java.util.Collection<com.poesys.accounting.bs.transaction.BsItem> items)
      throws com.poesys.db.dto.DtoStatusException {
    ReimbursingItemsCollectionBuilder builder =
      new ReimbursingItemsCollectionBuilder();
    dto.setReimbursingItems(builder.getCollection(items));
  }

  /**
   * <p>
   * Set the receivables collection.
   * </p>
   * <p>
   * the set of receivable items
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param receivables the collection of receivable items
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   */
  public void setReceivables(java.util.Collection<com.poesys.accounting.bs.transaction.BsItem> receivables)
      throws com.poesys.db.dto.DtoStatusException {
    ReceivablesCollectionBuilder builder = new ReceivablesCollectionBuilder();
    dto.setReceivables(builder.getCollection(receivables));
  }

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsItem object.
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @return a com.poesys.accounting.bs.transaction.BsReimbursement object
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public java.util.Collection<com.poesys.accounting.bs.transaction.BsReimbursement> getReimbursements()
      throws java.sql.SQLException {
    BsReimbursementsCollectionBuilder builder =
      new BsReimbursementsCollectionBuilder();
    return builder.getCollection(dto.getReimbursements());
  }

  /**
   * <p>
   * Set the reimbursingItems.
   * </p>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Item</li>
   * </ul>
   * 
   * @param entityName the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set the
   *           data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *           required but the input parameter entityName is null
   */
  public void setReimbursements(java.util.Collection<com.poesys.accounting.bs.transaction.BsReimbursement> entityName)
      throws com.poesys.db.dto.DtoStatusException,
      com.poesys.db.InvalidParametersException {
    ReimbursementsCollectionBuilder builder =
      new ReimbursementsCollectionBuilder();
    dto.setReimbursements(builder.getCollection(entityName));
  }

  /**
   * Add a Item object to the reimbursingItems collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public void addReimbursingItem(com.poesys.accounting.bs.transaction.BsItem object)
      throws java.sql.SQLException {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto",
                                                                                          null));
    }

    dto.addReimbursingItem(object.toDto());
  }

  /**
   * Add a Item object to the receivables collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public void addReceivableItem(com.poesys.accounting.bs.transaction.BsItem object)
      throws java.sql.SQLException {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto",
                                                                                          null));
    }

    dto.addReceivableItem(object.toDto());
  }

  /**
   * Add a Reimbursement object to the reimbursements collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to
   *           load the property lazily
   */
  public void addReimbursement(com.poesys.accounting.bs.transaction.BsReimbursement object)
      throws java.sql.SQLException {
    if (object == null) {
      throw new com.poesys.db.InvalidParametersException(com.poesys.db.Message.getMessage("com.poesys.db.dao.msg.no_dto",
                                                                                          null));
    }

    dto.addReimbursement(object.toDto());
  }
}