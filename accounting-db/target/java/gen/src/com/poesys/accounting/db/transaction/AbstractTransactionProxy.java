/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.transaction;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Transaction. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An exchange of value between accounts; the items that correspond to the fiscal
 * year accounts must balance (cancel each other out with respect to debits and
 * credits)
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractTransactionProxy extends AbstractLazyLoadingDtoProxy implements ITransaction {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractTransactionProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractTransactionProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractTransactionProxy>();
  


  /**
   * Read-Object setter for de-serializing nested items list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see com.poesys.accounting.db.transaction.sql.QueryItem
   */
  private class ReadItemsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.accounting.db.transaction.IItem> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadItemsSetter object to read the items list.
     */
    public ReadItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getObjectList() {
      java.util.List<com.poesys.accounting.db.transaction.IItem> items =  ((com.poesys.accounting.db.transaction.Transaction)dto).getItems();
      return items;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((com.poesys.accounting.db.transaction.Transaction)dto).itemsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
       setItems(list);
    }
  }

  /**
   * Add a com.poesys.accounting.db.transaction.IItem object to the Items collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the com.poesys.accounting.db.transaction.IItem object to add to the collection
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object) {
    ((Transaction)dto).addItemsItem(object);
  }

  /**
   * Create a TransactionProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractTransactionProxy(Transaction dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadItemsSetter());

    // Add query setters for single-object deserialization.
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractTransactionProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractTransactionProxy otherProxy = (AbstractTransactionProxy)obj;
    return ((Transaction)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Transaction)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getTransactionId() {
    return ((Transaction)dto).getTransactionId();
  }

  /**
   * Set the transactionId from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param transactionId the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setTransactionId(java.math.BigInteger transactionId)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setTransactionId(transactionId);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getDescription() {
    return ((Transaction)dto).getDescription();
  }

  /**
   * Set the description from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param description the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setDescription(java.lang.String description)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setDescription(description);
  }

  /**
   * Get an object of java.sql.Timestamp
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.sql.Timestamp
   */
  public java.sql.Timestamp getTransactionDate() {
    return ((Transaction)dto).getTransactionDate();
  }

  /**
   * Set the transactionDate from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param transactionDate the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setTransactionDate(java.sql.Timestamp transactionDate)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setTransactionDate(transactionDate);
  }

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getChecked() {
    return ((Transaction)dto).getChecked();
  }

  /**
   * Set the checked from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param checked the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setChecked(java.lang.Boolean checked)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setChecked(checked);
  }

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getBalance() {
    return ((Transaction)dto).getBalance();
  }

  /**
   * Set the balance from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param balance the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setBalance(java.lang.Boolean balance)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setBalance(balance);
  }

  /**
   * Get a list of com.poesys.accounting.db.transaction.IItem
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem>
   */
  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems() {
    return ((Transaction)dto).getItems();
  }

  /**
   * Set the items from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param items the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items)
      throws com.poesys.db.InvalidParametersException {
    ((Transaction)dto).setItems(items);
  }

  public void markChildrenDeleted() {
  	((Transaction)dto).markChildrenDeleted();
  }
}