/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package com.poesys.accounting.db.transaction;


import org.apache.log4j.Logger;

import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Reimbursement. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A link between a receivable item and another receivable item that reimburses the
 * first one; the first one is a debit against a receivable account, the second one
 * is a credit against the same account. The accounts associated with related items
 * must be the same. One receivable item can be reimbursed by several reimbursement
 * items, and one reimbursement item can reimburse several receivables. For
 * example, you take a business trip and have 15 separate items that you submit as
 * receivables from the company. The company pays you with a single expense check:
 * that creates 15 links to the various receivables. If it pays you with a couple
 * of different checks, there would still be 15 links, but there would be multiple
 * reimbursement items in the set as well as multiple receivable items. A link has
 * a reimbursement amount that must be less than or equal to the reimbursement
 * item's amount (part or all of the amount constitutes the reimbursement); the set
 * of links for one reimbursement item must have reimbursement amounts that sum to
 * less than the item amount. There can also be allocated amounts that aren't
 * reimbursed; those are not part of the summation validation, but they do
 * participate in sums of amounts applied to the receivable--the sum of all link
 * reimbursement and allocated amounts for a specific receivable item should be
 * less than or equal to the receivable amount; less than means the receivable was
 * not entirely reimbursed and requires additional payments (or writing off). You
 * can have a reimbursement link with a zero reimbursement amount and a positive
 * allocated amount.
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractReimbursementProxy extends AbstractLazyLoadingDtoProxy implements IReimbursement {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractReimbursementProxy.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractReimbursementProxy> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractReimbursementProxy>();

  // Lazy-loading/deserialization query setter strategy nested classes for 
  // single-object associations
  
  /** Flag indicating whether the reimbursingItem property has been loaded */
  private transient boolean reimbursingItemLoaded = false;
  
  /**
   * Query setter for lazily querying nested reimbursingItem object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see com.poesys.accounting.db.transaction.sql.QueryItem
   */
  private class QueryReimbursingItemSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.transaction.IItem> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryReimbursingItemSetter object.
     */
    public QueryReimbursingItemSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.transaction.IItem primary key with the value 
      // from the com.poesys.accounting.db.transaction.IReimbursement object
      return com.poesys.accounting.db.transaction.TransactionFactory.getItemPrimaryKey(((IReimbursement)dto).getReimbursingItemsOrderNumber(), ((IReimbursement)dto).getReimbursingItemsTransactionId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(com.poesys.accounting.db.transaction.IItem dto) {
      setReimbursingItem(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded reimbursingItem
      return reimbursingItemLoaded;
    }
  }

  /** Flag indicating whether the receivable property has been loaded */
  private transient boolean receivableLoaded = false;
  
  /**
   * Query setter for lazily querying nested receivable object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see com.poesys.accounting.db.transaction.sql.QueryItem
   */
  private class QueryReceivableSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<com.poesys.accounting.db.transaction.IItem> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryReceivableSetter object.
     */
    public QueryReceivableSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an com.poesys.accounting.db.transaction.IItem primary key with the value 
      // from the com.poesys.accounting.db.transaction.IReimbursement object
      return com.poesys.accounting.db.transaction.TransactionFactory.getItemPrimaryKey(((IReimbursement)dto).getReceivablesOrderNumber(), ((IReimbursement)dto).getReceivablesTransactionId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(com.poesys.accounting.db.transaction.IItem dto) {
      setReceivable(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded receivable
      return receivableLoaded;
    }
  }

  /**
   * Create a ReimbursementProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractReimbursementProxy(Reimbursement dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();

    // Add query setters for single-object deserialization.
    readObjectSetters.add(new QueryReimbursingItemSetter());
    readObjectSetters.add(new QueryReceivableSetter());
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
    ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractReimbursementProxy");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }

  @Override
  public boolean equals(Object obj) {
    AbstractReimbursementProxy otherProxy = (AbstractReimbursementProxy)obj;
    return ((Reimbursement)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Reimbursement)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.Double
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Double
   */
  public java.lang.Double getReimbursedAmount() {
    return ((Reimbursement)dto).getReimbursedAmount();
  }

  /**
   * Set the reimbursedAmount from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param reimbursedAmount the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setReimbursedAmount(java.lang.Double reimbursedAmount)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReimbursedAmount(reimbursedAmount);
  }

  /**
   * Get an object of java.lang.Double
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Double
   */
  public java.lang.Double getAllocatedAmount() {
    return ((Reimbursement)dto).getAllocatedAmount();
  }

  /**
   * Set the allocatedAmount from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param allocatedAmount the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setAllocatedAmount(java.lang.Double allocatedAmount)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setAllocatedAmount(allocatedAmount);
  }

  /**
   * Get an object of com.poesys.accounting.db.transaction.IItem
   * loading the reimbursingItem association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a com.poesys.accounting.db.transaction.IItem
   */
  public com.poesys.accounting.db.transaction.IItem getReimbursingItem() {
    // Lazy-load the local property reimbursingItem if not loaded and the key reimbursingItems is not null.
    if (!reimbursingItemLoaded && ((IReimbursement)dto).getReimbursingItemsOrderNumber() != null && ((IReimbursement)dto).getReimbursingItemsTransactionId() != null) {
      com.poesys.db.dto.ISet setter = new QueryReimbursingItemSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      reimbursingItemLoaded = true;
    } else if (!reimbursingItemLoaded) {
      // reimbursingItems key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("reimbursingItems");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((Reimbursement)dto).getReimbursingItem();
  }


  /**
   * Clear the lazily loaded property reimbursingItem if it is loaded.
   */
  public void clearReimbursingItem() {
    // Only clear if loaded already.
    if (reimbursingItemLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Reimbursement)dto).setReimbursingItem(null);
        ((Reimbursement)dto).undoStatus();
        reimbursingItemLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the reimbursingItem from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param reimbursingItem the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReimbursingItem(com.poesys.accounting.db.transaction.IItem reimbursingItem)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReimbursingItem(reimbursingItem);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    reimbursingItemLoaded = true;
  }

  /**
   * Get an object of com.poesys.accounting.db.transaction.IItem
   * loading the receivable association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a com.poesys.accounting.db.transaction.IItem
   */
  public com.poesys.accounting.db.transaction.IItem getReceivable() {
    // Lazy-load the local property receivable if not loaded and the key receivables is not null.
    if (!receivableLoaded && ((IReimbursement)dto).getReceivablesOrderNumber() != null && ((IReimbursement)dto).getReceivablesTransactionId() != null) {
      com.poesys.db.dto.ISet setter = new QueryReceivableSetter();
      setter.set();
      // Mark the field as loaded once the query setter has run.
      receivableLoaded = true;
    } else if (!receivableLoaded) {
      // receivables key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("receivables");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((Reimbursement)dto).getReceivable();
  }


  /**
   * Clear the lazily loaded property receivable if it is loaded.
   */
  public void clearReceivable() {
    // Only clear if loaded already.
    if (receivableLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Reimbursement)dto).setReceivable(null);
        ((Reimbursement)dto).undoStatus();
        receivableLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the receivable from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param receivable the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReceivable(com.poesys.accounting.db.transaction.IItem receivable)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReceivable(receivable);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    receivableLoaded = true;
  }

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getReceivablesOrderNumber() {
    return ((Reimbursement)dto).getReceivablesOrderNumber();
  }

  /**
   * Set the receivablesOrderNumber from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param receivablesOrderNumber the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReceivablesOrderNumber(java.lang.Integer receivablesOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReceivablesOrderNumber(receivablesOrderNumber);
  }

  /**
   * Get an object of java.lang.Integer
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Integer
   */
  public java.lang.Integer getReimbursingItemsOrderNumber() {
    return ((Reimbursement)dto).getReimbursingItemsOrderNumber();
  }

  /**
   * Set the reimbursingItemsOrderNumber from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param reimbursingItemsOrderNumber the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReimbursingItemsOrderNumber(java.lang.Integer reimbursingItemsOrderNumber)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReimbursingItemsOrderNumber(reimbursingItemsOrderNumber);
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getReceivablesTransactionId() {
    return ((Reimbursement)dto).getReceivablesTransactionId();
  }

  /**
   * Set the receivablesTransactionId from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param receivablesTransactionId the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReceivablesTransactionId(java.math.BigInteger receivablesTransactionId)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReceivablesTransactionId(receivablesTransactionId);
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getReimbursingItemsTransactionId() {
    return ((Reimbursement)dto).getReimbursingItemsTransactionId();
  }

  /**
   * Set the reimbursingItemsTransactionId from a lazy-loading proxy, either for lazily 
   * loading the data or deserializing nested objects. The IDbDto-derived 
   * interface does not contain this method.
   *
   * @param reimbursingItemsTransactionId the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setReimbursingItemsTransactionId(java.math.BigInteger reimbursingItemsTransactionId)
      throws com.poesys.db.InvalidParametersException {
    ((Reimbursement)dto).setReimbursingItemsTransactionId(reimbursingItemsTransactionId);
  }

  public void markChildrenDeleted() {
  	((Reimbursement)dto).markChildrenDeleted();
  }
}