/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package com.poesys.accounting.db.account;


import org.apache.log4j.Logger;

import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;


/**
 * <p>
 * A data-access layer data-transfer object for the Account. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A division of the accounting system representing an individual accounting
 * element; divided into assets, liabilities, and equity on the balance sheet or
 * income or expense on the income statement; owned by an accounting entity
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccount extends AbstractDto implements IAccount {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  /** Logger for this class */
  private static final Logger logger = Logger.getLogger(AbstractAccount.class);

  /** the deserializer used by the readObject method */
  private static final com.poesys.db.dto.Deserializer<AbstractAccount> deserializer =
    new com.poesys.db.dto.Deserializer<AbstractAccount>();

  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the entity association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryEntitySetter extends com.poesys.db.dto.AbstractObjectSetter<com.poesys.accounting.db.account.IEntity> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryEntitySetter object.
     */
    public QueryEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Entity.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return entityKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.account.IEntity> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryEntity();
    }

    @Override
    protected void set(com.poesys.accounting.db.account.IEntity dto) {
      // No status change, this is just filling in the object data.
      entity = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated entity is not null
      return entity != null;
    }
  }

  /**
   * Post-process setter for post-processing nested object property entity.
   */
  private class PostProcessEntitySetter 
      extends com.poesys.db.dto.AbstractPostProcessSetter {
    // Property entity source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create a PostProcessEntitySetter object.
     */
    public PostProcessEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Entity.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      if (entity != null) {
        array.add(entity);
      }
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested object property entity.
   */
  private class InsertEntitySetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property entity source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertEntitySetter object.
     */
    public InsertEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Entity.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(entity);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Setter for processing added entity, updated entity, and 
   * deleted entity. 
   */
   
  private class UpdateEntitySetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<com.poesys.accounting.db.account.IEntity> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateEntitySetter object.
     */
    public UpdateEntitySetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(com.poesys.accounting.db.account.IEntity dto) {
        // entity source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Entity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<com.poesys.accounting.db.account.IEntity> updater = 
        factory.getUpdate(new com.poesys.accounting.db.account.sql.UpdateEntity());

      updater.update(dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(com.poesys.accounting.db.account.IEntity dto) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Entity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<com.poesys.accounting.db.account.IEntity> dao = 
        factory.getDelete(new com.poesys.accounting.db.account.sql.DeleteEntity());
      dao.delete(dto);
    }

    @Override
    protected void doNew(com.poesys.accounting.db.account.IEntity dto) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IEntity> factory = 
        manager.getFactory(com.poesys.accounting.db.account.Entity.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<com.poesys.accounting.db.account.IEntity> inserter =
        factory.getInsert(new com.poesys.accounting.db.account.sql.InsertEntity(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.insert(dto);
    }

    @Override
    protected com.poesys.accounting.db.account.IEntity getDto() {
      return entity;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.Entity.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryEntitySetter nested class to query object
   */
  private IPrimaryKey entityKey;
  
  /**
   * Set the foreign key entityKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param entityKey the foreign key
   */
  void setEntityKey(IPrimaryKey entityKey) {
    this.entityKey = entityKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Post-processing setter for post-processing nested to-many association fiscalYear.
   */
  private class PostProcessYearsSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association years source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an PostProcessYearsSetter object.
     */
    public PostProcessYearsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = years;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association fiscalYear.
   *
   * @see com.poesys.accounting.db.account.sql.InsertFiscalYear
   */
  private class InsertYearsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association years source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertYearsSetter object.
     */
    public InsertYearsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = years;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added fiscalYear, updated fiscalYear, and 
   * deleted fiscalYear. 
   */

  private class UpdateYearsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.account.IFiscalYear, java.util.Collection<com.poesys.accounting.db.account.IFiscalYear>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 5;

    /**
     * Create an UpdateYearsSetter object.
     */
    public UpdateYearsSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> dtos) {
      // years source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYear> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYear.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.account.IFiscalYear> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.account.sql.UpdateFiscalYear());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYear> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYear.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.account.IFiscalYear> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.account.sql.DeleteFiscalYear());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYear> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYear.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.account.IFiscalYear> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.account.sql.InsertFiscalYear());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> getDtos() {
      return years;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYear.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.account.IFiscalYear object to years collection.
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYear object
   */
  public void addYearsFiscalYear(com.poesys.accounting.db.account.IFiscalYear object) {
    if (years == null) {
      // Association not yet created, create it.
      years = new java.util.ArrayList<com.poesys.accounting.db.account.IFiscalYear>();
    }
    years.add(object);
    // Add the primary key to the primary key array.
    if (fiscalYearKeys != null) {
      fiscalYearKeys.clear();
    } else {
      fiscalYearKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    fiscalYearKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested items
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryItemsByAccount
   */
  private class QueryItemsSetter 
      extends com.poesys.db.dto.AbstractListSetter<com.poesys.accounting.db.transaction.IItem, IAccount, java.util.List<com.poesys.accounting.db.transaction.IItem>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryItemsSetter object.
     */
    public QueryItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IAccount getParametersDto() {
      return AbstractAccount.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<com.poesys.accounting.db.transaction.IItem, IAccount> getSql() {
      return new com.poesys.accounting.db.account.sql.QueryItemsByAccount();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
      // No status change; this is just filling in the object data.
      items = list;
      // Add the primary keys to the serialized key list if there are any.
      if (items != null) {
        if (itemsKeys != null) {
          itemsKeys.clear();
        } else {
          itemsKeys = new java.util.ArrayList<IPrimaryKey>();
        }
        for (com.poesys.db.dto.IDbDto object : items) {
          itemsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated items list is not null
      return items != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested items list
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see com.poesys.accounting.db.account.sql.QueryItem
   */
  private class ReadItemsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<com.poesys.accounting.db.transaction.IItem> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadItemsSetter object to read the items list.
     */
    public ReadItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getObjectList() {
      return items;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return itemsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<com.poesys.accounting.db.transaction.IItem> getSql() {
      return new com.poesys.accounting.db.transaction.sql.QueryItem();
    }

    @Override
    protected void set(java.util.List<com.poesys.accounting.db.transaction.IItem> list) {
      items = list;
    }
  }
  /**
   * Post-processing setter for post-processing nested to-many association items.
   */
  private class PostProcessItemsSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association items source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an PostProcessItemsSetter object.
     */
    public PostProcessItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = items;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association items.
   *
   * @see com.poesys.accounting.db.transaction.sql.InsertItem
   */
  private class InsertItemsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association items source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertItemsSetter object.
     */
    public InsertItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = items;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added items, updated items, and 
   * deleted items. 
   */

  private class UpdateItemsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.transaction.IItem, java.util.List<com.poesys.accounting.db.transaction.IItem>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateItemsSetter object.
     */
    public UpdateItemsSetter() {
      super("com.poesys.accounting.db.transaction", 2147483647);
    }

    @Override
    protected void doChanged(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      // items source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.transaction.IItem> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.transaction.sql.UpdateItem());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.transaction.IItem> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.transaction.sql.DeleteItem());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.List<com.poesys.accounting.db.transaction.IItem> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.transaction.IItem> factory = 
        manager.getFactory(com.poesys.accounting.db.transaction.Item.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.transaction.IItem> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.transaction.sql.InsertItem());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<com.poesys.accounting.db.transaction.IItem> getDtos() {
      return items;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.transaction.Item.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.transaction.IItem object to items collection.
   * 
   * @param object the com.poesys.accounting.db.transaction.IItem object
   */
  public void addItemsItem(com.poesys.accounting.db.transaction.IItem object) {
    if (items == null) {
      // Association not yet created, create it.
      items = new java.util.ArrayList<com.poesys.accounting.db.transaction.IItem>();
    }
    items.add(object);
    // Add the primary key to the primary key array.
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    itemsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Post-processing setter for post-processing nested to-many association fiscalYearAccount.
   */
  private class PostProcessFiscalYearAccountSetter extends com.poesys.db.dto.AbstractPostProcessSetter {
    private static final long serialVersionUID = 1L;
    
    // Association fiscalYearAccount source: AddAssociationClassCollectionProperties

    /**
     * Create an PostProcessFiscalYearAccountSetter object.
     */
    public PostProcessFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = fiscalYearAccount;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }
  }

  /**
   * Insert setter for inserting nested to-many association fiscalYearAccount.
   *
   * @see com.poesys.accounting.db.account.sql.InsertFiscalYearAccount
   */
  private class InsertFiscalYearAccountSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association fiscalYearAccount source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertFiscalYearAccountSetter object.
     */
    public InsertFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = fiscalYearAccount;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added fiscalYearAccount and updated fiscalYearAccount.
   * Deleted fiscalYearAccount are deleted in the database cascade delete.
   */

  private class UpdateFiscalYearAccountSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<com.poesys.accounting.db.account.IFiscalYearAccount, java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateFiscalYearAccountSetter object.
     */
    public UpdateFiscalYearAccountSetter() {
      super("com.poesys.accounting.db.account", 2147483647);
    }

    @Override
    protected void doChanged(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> dtos) {
      // fiscalYearAccount source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYearAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYearAccount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<com.poesys.accounting.db.account.IFiscalYearAccount> updater =
        factory.getUpdateBatch(new com.poesys.accounting.db.account.sql.UpdateFiscalYearAccount());

      // Update the object of the leaf class.
      updater.update(dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYearAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYearAccount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<com.poesys.accounting.db.account.IFiscalYearAccount> dao = 
        factory.getDeleteBatch(new com.poesys.accounting.db.account.sql.DeleteFiscalYearAccount());
      dao.delete(dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> dtos) {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IFiscalYearAccount> factory = 
        manager.getFactory(com.poesys.accounting.db.account.FiscalYearAccount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<com.poesys.accounting.db.account.IFiscalYearAccount> inserter =
        factory.getInsertBatch(new com.poesys.accounting.db.account.sql.InsertFiscalYearAccount());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.insert(dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getDtos() {
      return fiscalYearAccount;
    }
    
    @Override
    protected String getClassName() {
      return com.poesys.accounting.db.account.FiscalYearAccount.class.getName();
    }
  }

  /**
   * Add com.poesys.accounting.db.account.IFiscalYearAccount object to fiscalYearAccount collection.
   * 
   * @param object the com.poesys.accounting.db.account.IFiscalYearAccount object
   */
  public void addFiscalYearAccountFiscalYearAccount(com.poesys.accounting.db.account.IFiscalYearAccount object) {
    if (fiscalYearAccount == null) {
      // Association not yet created, create it.
      fiscalYearAccount = new java.util.ArrayList<com.poesys.accounting.db.account.IFiscalYearAccount>();
    }
    fiscalYearAccount.add(object);
    // Add the primary key to the primary key array.
    if (fiscalYearAccountKeys != null) {
      fiscalYearAccountKeys.clear();
    } else {
      fiscalYearAccountKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    fiscalYearAccountKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Account for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAccount() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the entity property.
    querySetters.add(new QueryEntitySetter());
    preSetters.add(new InsertEntitySetter());
    postSetters.add(new UpdateEntitySetter());
    postProcessSetters.add(new PostProcessEntitySetter());
    
    // Add the many-to-many collection setters for the years property.
    insertSetters.add(new InsertYearsSetter());
    postSetters.add(new UpdateYearsSetter());
    postProcessSetters.add(new PostProcessYearsSetter());
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
    postProcessSetters.add(new PostProcessItemsSetter());
    
    // Add the many-to-many collection setters for the fiscalYearAccount property.
    insertSetters.add(new InsertFiscalYearAccountSetter());
    postSetters.add(new UpdateFiscalYearAccountSetter());
    postProcessSetters.add(new PostProcessFiscalYearAccountSetter());
  }

  /**
   * Create a Account. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Account
   * @param entityName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param accountName the account name; unique within the entity
   * @param description text description of the nature of the account
   * @param debitDefault whether the account transaction items default to a debit or credit item; chosen
as the "usual" value for items in this account
   * @param active whether the account is active at the present time; an inactive account does not
appear in lists of accounts available through the user interface but does appear
in reports where referenced by items
   */
  public AbstractAccount(IPrimaryKey key, java.lang.String entityName, java.lang.String accountName, java.lang.String description, java.lang.Boolean debitDefault, java.lang.Boolean active) {
    this.key = key;

    this.entityName = entityName;

    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required for " + key.getValueList());
    }
    
    this.accountName = accountName;

    if (accountName == null) {
      throw new com.poesys.db.InvalidParametersException("accountName is required for " + key.getValueList());
    }
    
    this.description = description;

    if (description == null) {
      throw new com.poesys.db.InvalidParametersException("description is required for " + key.getValueList());
    }
    
    this.debitDefault = debitDefault;

    if (debitDefault == null) {
      throw new com.poesys.db.InvalidParametersException("debitDefault is required for " + key.getValueList());
    }
    
    this.active = active;

    if (active == null) {
      throw new com.poesys.db.InvalidParametersException("active is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (postProcessSetters == null) {
      postProcessSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.ArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the entity property.
    querySetters.add(new QueryEntitySetter());
    // Set the object property primary key with a factory method.
    entityKey = com.poesys.accounting.db.account.AccountFactory.getEntityPrimaryKey(entityName);
    insertSetters.add(new InsertEntitySetter());
    preSetters.add(new InsertEntitySetter());
    postSetters.add(new UpdateEntitySetter());
    postProcessSetters.add(new PostProcessEntitySetter());
    
    // Add a setter to instantiate the required entity object before insert.
    insertQuerySetters.add(new QueryEntitySetter());
    
    // Add the many-to-many collection setters for the fiscalYear property.
    insertSetters.add(new InsertYearsSetter());
    postSetters.add(new UpdateYearsSetter());
    postProcessSetters.add(new PostProcessYearsSetter());
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
    postProcessSetters.add(new PostProcessItemsSetter());
    
    // Add the many-to-many collection setters for the fiscalYearAccount property.
    insertSetters.add(new InsertFiscalYearAccountSetter());
    postSetters.add(new UpdateFiscalYearAccountSetter());
    postProcessSetters.add(new PostProcessFiscalYearAccountSetter());
    abstractClass = false;
    // Superclass should not call createInserters() in constructor, leaf class calls.
    // createInserters();
  }

  /**
   * Read an object from an input stream, de-serializing it. Each generated
   * class must have this private method, which the deserialize method calls
   * through Java reflection on the specific class. The class calls a shared
   * code method to run the readObjectSetters.
   * 
   * @param in the object input stream
   * @throws ClassNotFoundException when a nested object class can't be found
   * @throws IOException when there is an IO problem reading the stream
   */
  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
      ClassNotFoundException {
    logger.debug("Deserializing object of class " + this.getClass().getName()
                 + " with readObject in AbstractAccount");
    // Do the read-object deserialization.
    deserializer.doReadObject(in, this);
  }
   
  @Override
  public boolean equals(Object arg0) {
    IAccount other = (IAccount)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IAccount other = (IAccount)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "com.poesys.accounting.db.account";
  }

  @Override
  public void markChildrenDeleted() {
    // Only process deletes if child exists.
    if (fiscalYearAccount != null) {
      for (com.poesys.db.dto.IDbDto dto : fiscalYearAccount) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  /**
   * Nested property entityName
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String entityName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes
   * 
   * @return a java.lang.String
   */

  public java.lang.String getEntityName() {
    return entityName;
  }

  /**
   * Clear the entityName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEntityName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the entityName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * @param entityName the value with which to set the property
   */
  void setEntityName(java.lang.String entityName)
      throws com.poesys.db.InvalidParametersException {
    if (entityName == null) {
      throw new com.poesys.db.InvalidParametersException("entityName is required");
    }
    
    this.entityName = entityName;
    setChanged();
  }
  /**
   * Nested property accountName
   *
   * <p>
   * the account name; unique within the entity
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String accountName;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * 
   * @return a java.lang.String
   */

  public java.lang.String getAccountName() {
    return accountName;
  }

  /**
   * Clear the accountName data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccountName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accountName.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: false</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the account name; unique within the entity
   * </p>
   *
   * @param accountName the value with which to set the property
   */
  void setAccountName(java.lang.String accountName)
      throws com.poesys.db.InvalidParametersException {
    if (accountName == null) {
      throw new com.poesys.db.InvalidParametersException("accountName is required");
    }
    
    this.accountName = accountName;
    setChanged();
  }
  /**
   * Nested property description
   *
   * <p>
   * text description of the nature of the account
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String description;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getDescription() {
    return description;
  }

  /**
   * Clear the description data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the description.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * text description of the nature of the account
   * </p>
   *
   * @param description the value with which to set the property
   */
  public void setDescription(java.lang.String description)
      throws com.poesys.db.InvalidParametersException {
    if (description == null) {
      throw new com.poesys.db.InvalidParametersException("description is required");
    }
    
    this.description = description;
    setChanged();
  }
  /**
   * Nested property debitDefault
   *
   * <p>
   * whether the account transaction items default to a debit or credit item; chosen
   * as the "usual" value for items in this account
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean debitDefault;
  
  /**
   * Get an object of java.lang.Boolean.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Boolean
   */

  public java.lang.Boolean getDebitDefault() {
    return debitDefault;
  }

  /**
   * Clear the debitDefault data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDebitDefault() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the debitDefault.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether the account transaction items default to a debit or credit item; chosen
   * as the "usual" value for items in this account
   * </p>
   *
   * @param debitDefault the value with which to set the property
   */
  public void setDebitDefault(java.lang.Boolean debitDefault)
      throws com.poesys.db.InvalidParametersException {
    if (debitDefault == null) {
      throw new com.poesys.db.InvalidParametersException("debitDefault is required");
    }
    
    this.debitDefault = debitDefault;
    setChanged();
  }
  /**
   * Nested property active
   *
   * <p>
   * whether the account is active at the present time; an inactive account does not
   * appear in lists of accounts available through the user interface but does appear
   * in reports where referenced by items
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean active;
  
  /**
   * Get an object of java.lang.Boolean.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Boolean
   */

  public java.lang.Boolean getActive() {
    return active;
  }

  /**
   * Clear the active data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearActive() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the active.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * whether the account is active at the present time; an inactive account does not
   * appear in lists of accounts available through the user interface but does appear
   * in reports where referenced by items
   * </p>
   *
   * @param active the value with which to set the property
   */
  public void setActive(java.lang.Boolean active)
      throws com.poesys.db.InvalidParametersException {
    if (active == null) {
      throw new com.poesys.db.InvalidParametersException("active is required");
    }
    
    this.active = active;
    setChanged();
  }
  /**
   * Nested property entity
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private com.poesys.accounting.db.account.IEntity entity;
  
  /**
   * Get an object of com.poesys.accounting.db.account.IEntity.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a com.poesys.accounting.db.account.IEntity
   */

  public com.poesys.accounting.db.account.IEntity getEntity() {
    return entity;
  }

  /**
   * Clear the entity data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEntity() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the entity.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param entity the value with which to set the property
   */
  public void setEntity(com.poesys.accounting.db.account.IEntity entity)
      throws com.poesys.db.InvalidParametersException {
    if (entity == null) {
      throw new com.poesys.db.InvalidParametersException("entity is required");
    }
    
    this.entity = entity;
    setChanged();
  }
  /**
   * Nested property years
   *
   * <p>
   * the set of fiscal years for which an account is active
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years;
  // Ordered list of keys of the objects in the years list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> fiscalYearKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYear.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYear>
   */

  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> getYears() {
    return years;
  }

  /**
   * Clear the years data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearYears() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the years.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of fiscal years for which an account is active
   * </p>
   *
   * @param years the value with which to set the property
   */
  public  void setFiscalYear(java.util.Collection<com.poesys.accounting.db.account.IFiscalYear> years) {
    this.years = years;
    // Add the primary keys of the new collection to the serialized key list.
    if (fiscalYearKeys != null) {
      fiscalYearKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      fiscalYearKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (years != null) {
    if (fiscalYearKeys != null) {
      fiscalYearKeys.clear();
    } else {
      fiscalYearKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : years) {
        fiscalYearKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property items
   *
   * <p>
   * the set of items against the account
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<com.poesys.accounting.db.transaction.IItem> items;
  // Ordered list of keys of the objects in the items list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> itemsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of com.poesys.accounting.db.transaction.IItem.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.List<com.poesys.accounting.db.transaction.IItem>
   */

  public java.util.List<com.poesys.accounting.db.transaction.IItem> getItems() {
    return items;
  }

  /**
   * Clear the items data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearItems() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the items.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of items against the account
   * </p>
   *
   * @param items the value with which to set the property
   */
  public  void setItems(java.util.List<com.poesys.accounting.db.transaction.IItem> items) {
    this.items = items;
    // Add the primary keys of the new collection to the serialized key list.
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (items != null) {
    if (itemsKeys != null) {
      itemsKeys.clear();
    } else {
      itemsKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : items) {
        itemsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property fiscalYearAccount
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount;
  // Ordered list of keys of the objects in the fiscalYearAccount list
  transient java.util.List<com.poesys.db.pk.IPrimaryKey> fiscalYearAccountKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of com.poesys.accounting.db.account.IFiscalYearAccount.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount>
   */

  public java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> getFiscalYearAccount() {
    return fiscalYearAccount;
  }

  /**
   * Clear the fiscalYearAccount data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearFiscalYearAccount() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the fiscalYearAccount.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param fiscalYearAccount the value with which to set the property
   */
  public void setFiscalYearAccount(java.util.Collection<com.poesys.accounting.db.account.IFiscalYearAccount> fiscalYearAccount)
      throws com.poesys.db.InvalidParametersException {
    if (fiscalYearAccount == null) {
      throw new com.poesys.db.InvalidParametersException("fiscalYearAccount is required");
    }
    
    this.fiscalYearAccount = fiscalYearAccount;
    // Add the primary keys of the new collection to the serialized key list.
    if (fiscalYearAccountKeys != null) {
      fiscalYearAccountKeys.clear();
    } else {
      // Allocate a new, empty list of primary keys.
      fiscalYearAccountKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
    if (fiscalYearAccount != null) {
    if (fiscalYearAccountKeys != null) {
      fiscalYearAccountKeys.clear();
    } else {
      fiscalYearAccountKeys = new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
    }
      for (com.poesys.db.dto.IDbDto object : fiscalYearAccount) {
        fiscalYearAccountKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event) {

    // Clean up fiscalYearAccount.
    if (subject != null && subject instanceof com.poesys.accounting.db.account.IFiscalYearAccount && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        fiscalYearAccount != null) {
      // Delete to-many fiscalYearAccount child from collection
      fiscalYearAccount.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to fiscalYearAccount.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        fiscalYearAccount != null) {
      // Mark fiscalYearAccount association object cascade-deleted.
      outer: for (com.poesys.accounting.db.account.IFiscalYearAccount value : fiscalYearAccount) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Account and its superclasses.
   */
  protected void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<com.poesys.accounting.db.account.IAccount> accountFactory =
      manager.getFactory("com.poesys.accounting.db.account.Account",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IAccount> sql =
      new com.poesys.accounting.db.account.sql.InsertAccount();
    com.poesys.db.dao.insert.IInsert<IAccount> inserter =
      accountFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}