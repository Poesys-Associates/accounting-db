/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractQueryAssociatedOneToManyObjects.vsl

package com.poesys.accounting.db.account.sql;


import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.dao.query.IParameterizedQuerySql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A query Command pattern object that implements a SQL query of a collection of 
 * FiscalYearAccount objects using the primary key of an associated 
 * AccountGroup object through the association Accounts. This
 * is a many-to-one association from FiscalYearAccount to AccountGroup.
 * </p>
 * <p>
 * This SQL specification contains a SQL statement that queries a collection of
 * FiscalYearAccount objects from the database using the foreign key type
 * AccountGroup.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractQueryAccountsByAccountGroup 
    implements IParameterizedQuerySql<com.poesys.accounting.db.account.IFiscalYearAccount, com.poesys.accounting.db.account.IAccountGroup> {
  /** SQL query statement for FiscalYearAccount */
  private static final String SQL =
    "SELECT FiscalYearAccount.accountName, FiscalYearAccount.entityName, FiscalYearAccount.year, FiscalYearAccount.orderNumber, FiscalYearAccount.accountType, FiscalYearAccount.groupOrderNumber, FiscalYearAccount.group FROM FiscalYearAccount WHERE FiscalYearAccount.accountType = ? AND FiscalYearAccount.orderNumber = ?";

  @Override
  public void bindParameters(PreparedStatement stmt, com.poesys.accounting.db.account.IAccountGroup parameters) {
    // Set the parameters starting with the first parameter.
    parameters.getPrimaryKey().setParams(stmt, 1);
  }

  @Override
  public String getParameterValues(com.poesys.accounting.db.account.IAccountGroup parameters) {
    // Create the output string with the key parameters.
    return parameters.getPrimaryKey().getValueList();
  }

  @Override
  public com.poesys.accounting.db.account.IFiscalYearAccount getData(ResultSet rs) {
    try {
      return com.poesys.accounting.db.account.AccountFactory.getFiscalYearAccountData(getPrimaryKey(rs), rs);
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting data", e);
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey(ResultSet rs) {
    try {
      return com.poesys.accounting.db.account.AccountFactory.getFiscalYearAccountPrimaryKey(rs, "");
    } catch (com.poesys.db.InvalidParametersException | SQLException e) {
      throw new com.poesys.db.DbErrorException("Error getting primary key", e);
    }
  }

  @Override
  public String getSql() {
    return SQL;
  }
}