/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package com.poesys.accounting.bs.account;


import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Entity objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class EntityDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * The entity is the person or organization that owns all the accounts and the
 * transactions in them and is the basis for the accounting statements
 * </p>
 * @see EntityDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractEntityDelegate
    extends AbstractDataDelegate<BsEntity, com.poesys.accounting.db.account.IEntity, com.poesys.db.pk.NaturalPrimaryKey> {
  
  @SuppressWarnings("unused")
  private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(AbstractEntityDelegate.class);
  
  /**
   * Create an AbstractEntityDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractEntityDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractEntityDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractEntityDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return com.poesys.accounting.db.account.Entity.class.getName();
  }

  @Override
  protected IInsertSql<com.poesys.accounting.db.account.IEntity> getInsertSql() {
    return new com.poesys.accounting.db.account.sql.InsertEntity();
  }

  @Override
  protected IDeleteSql<com.poesys.accounting.db.account.IEntity> getDeleteSql() {
    return new com.poesys.accounting.db.account.sql.DeleteEntity();
  }

  @Override
  protected IUpdateSql<com.poesys.accounting.db.account.IEntity> getUpdateSql() {
    return new com.poesys.accounting.db.account.sql.UpdateEntity();
  }

  @Override
  protected IKeyQuerySql<com.poesys.accounting.db.account.IEntity> getQueryByKeySql() {
    return new com.poesys.accounting.db.account.sql.QueryEntity();
  }

  @Override
  protected IQuerySql<com.poesys.accounting.db.account.IEntity> getQueryListSql() {
    // Query-All method not required
    return new com.poesys.accounting.db.account.sql.QueryAllEntity();
  }

  @Override
  protected com.poesys.accounting.bs.account.BsEntity wrapData(com.poesys.accounting.db.account.IEntity dto) {
    return new com.poesys.accounting.bs.account.BsEntity(dto);
  }

  /**
   * <p>
   * Create a new Entity with data fields.
   * </p>
   * <p>
   * The Entity class has a natural key; this method creates the primary
   * key from the appropriate input properties.
   * </p>
   * 
   * @param entityName the name of the accounting entity; unique among all entities
   * @return the new Entity object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public com.poesys.accounting.bs.account.BsEntity createEntity(java.lang.String entityName)
      throws DelegateException {
    com.poesys.db.pk.NaturalPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.IColumnValue> list = new java.util.ArrayList<>();
      list.add(new com.poesys.db.col.StringColumnValue("entityName", entityName));
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.accounting.db.account.Entity");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a data-access DTO for direct access, no proxy required.
    com.poesys.accounting.db.account.IEntity dto =
      new com.poesys.accounting.db.account.Entity(key, entityName);

    // Create the business DTO.
    return new com.poesys.accounting.bs.account.BsEntity(dto);
  }

  /**
   * Create a new FiscalYearAccount association class child of Entity with 
   * an association key. This class links the input objects.
   * 
   * @param accountsObject associated Account object (part of the key)
   * @param groupObject associated AccountGroup object (part of the key)
   * @param yearsObject associated FiscalYear object (part of the key)
   * @param accountName Attribute that is part of the association key
   * @param entityName Attribute that is part of the association key
   * @param year Attribute that is part of the association key
   * @param accountOrderNumber the integer rank order of the account within the associated account group for
this fiscal year; the numbers form an ordering of all the objects with the same
fiscal year, and different fiscal years start from one, so there are duplicate
order numbers across fiscal years
   * @param groupOrderNumber the integer rank order of the account group within the account type associated
with the group for this fiscal year; the numbers form a rank order for groups
within types for each fiscal year, and the rank order repeats for different
fiscal years, resulting in duplicate order numbers in different fiscal years
   * @param accountType foreign key used by setter to query associated object
   * @param groupName foreign key used by setter to query associated object
   * @param group the group into which the account is aggregated
   * @return a new FiscalYearAccount business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.accounting.bs.account.BsFiscalYearAccount createFiscalYearAccount(com.poesys.accounting.bs.account.BsAccount accountsObject, com.poesys.accounting.bs.account.BsAccountGroup groupObject, com.poesys.accounting.bs.account.BsFiscalYear yearsObject, java.lang.String accountName, java.lang.String entityName, java.lang.Integer year, java.lang.Integer accountOrderNumber, java.lang.Integer groupOrderNumber, java.lang.String accountType, java.lang.String groupName, com.poesys.accounting.db.account.IAccountGroup group) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.AssociationPrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.pk.IPrimaryKey> list =
        new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
      list.add(accountsObject.getPrimaryKey());
      list.add(groupObject.getPrimaryKey());
      list.add(yearsObject.getPrimaryKey());
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "com.poesys.accounting.db.account.FiscalYearAccount");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create an association-key child data-access FiscalYearAccount DTO proxy (supports lazy loading).
    com.poesys.accounting.db.account.IFiscalYearAccount dto =
      new com.poesys.accounting.db.account.FiscalYearAccountProxy(new com.poesys.accounting.db.account.FiscalYearAccount(key, accountsObject.toDto(), groupObject.toDto(), yearsObject.toDto(), accountName, entityName, year, accountOrderNumber, groupOrderNumber, accountType, groupName, group));

    // Create the business DTO.
    return new com.poesys.accounting.bs.account.BsFiscalYearAccount(dto);
  }
  /**
   * Create a new Account child of Entity with a composite key.
   * 
   * @param parent the parent of the child object to create
   * @param entityName composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param accountName the account name; unique within the entity
   * @param description text description of the nature of the account
   * @param debitDefault whether the account transaction items default to a debit or credit item; chosen
as the "usual" value for items in this account
   * @param active whether the account is active at the present time; an inactive account does not
appear in lists of accounts available through the user interface but does appear
in reports where referenced by items
   * @return a new Account business layer DTO
   * @throws DelegateException when a parameter causes a problem
   */
  public com.poesys.accounting.bs.account.BsAccount createAccount(com.poesys.accounting.bs.account.BsEntity parent, java.lang.String entityName, java.lang.String accountName, java.lang.String description, java.lang.Boolean debitDefault, java.lang.Boolean active) throws DelegateException {
    // Create the key.
    com.poesys.db.pk.CompositePrimaryKey key = null;
    try {
      java.util.ArrayList<com.poesys.db.col.IColumnValue> list = new java.util.ArrayList<>();
      list.add(new com.poesys.db.col.StringColumnValue("accountName", accountName));
	  com.poesys.db.pk.IPrimaryKey subKey = 
	    com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "com.poesys.accounting.db.account.Account");
      key = 
        com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parent.getPrimaryKey(), 
                                                              subKey,
                                                              "com.poesys.accounting.db.account.Account");
    } catch (com.poesys.db.InvalidParametersException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    } catch (com.poesys.db.DuplicateKeyNameException e) {
      Object[] args = e.getParameters().toArray();
      String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
      throw new DelegateException(message, e);
    }

    // Create a composite-key child data-access Account DTO proxy (supports lazy loading).
    com.poesys.accounting.db.account.IAccount dto =
      new com.poesys.accounting.db.account.AccountProxy(new com.poesys.accounting.db.account.Account(key, entityName, accountName, description, debitDefault, active));

    // Create the business DTO.
    return new com.poesys.accounting.bs.account.BsAccount(dto);
  }

  @Override
  public void truncateTable(String tableName) throws DelegateException {
    com.poesys.db.dao.ddl.ISql sql = null;
    com.poesys.db.dao.ddl.IExecuteSql executive = null;

    try {
      // First truncate any child tables.
      sql = new com.poesys.db.dao.ddl.TruncateTableSql("FiscalYearAccount");
      executive = new com.poesys.db.dao.ddl.ExecuteSql(sql, subsystem);
      executive.execute();

      sql = new com.poesys.db.dao.ddl.TruncateTableSql("Account");
      executive = new com.poesys.db.dao.ddl.ExecuteSql(sql, subsystem);
      executive.execute();

      // Now truncate the current table.
      sql = new com.poesys.db.dao.ddl.TruncateTableSql(tableName);
      executive = new com.poesys.db.dao.ddl.ExecuteSql(sql, subsystem);
      executive.execute();
    } catch (Throwable e) {
      throw new DelegateException("Error truncating table " + tableName, e);
    }
  }
}
