/**
 * Copyright 2016 Poesys Associates. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package com.poesys.accounting.bs.account;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import com.poesys.accounting.db.account.IFiscalYearAccount;
import com.poesys.accounting.db.account.FiscalYearAccountProxy;
import com.poesys.accounting.db.account.FiscalYearAccount;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the FiscalYearAccount. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An account during a particular accounting period; a chart of accounts for an
 * accounting period consists of all the accounts that are current and active
 * during the specific accounting period
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsFiscalYearAccount 
    extends AbstractDto<com.poesys.accounting.db.account.IFiscalYearAccount> {

  /**
   * Create a BsFiscalYearAccount object from a FiscalYearAccount object.
   * 
   * @param dto the data-access layer FiscalYearAccount DTO
   * @throws DelegateException when there is a problem creating the FiscalYearAccount
   */
  public AbstractBsFiscalYearAccount(IFiscalYearAccount dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a FiscalYearAccount from new data.
   *
   * @param key the primary key of the FiscalYearAccount
   * @param accountsObject associated Account object
   * @param groupObject associated AccountGroup object
   * @param yearsObject associated FiscalYear object
   * @param accountName Attribute that is part of the association key
   * @param entityName Attribute that is part of the association key
   * @param year Attribute that is part of the association key
   * @param accountOrderNumber the integer rank order of the account within the associated account group for
this fiscal year; the numbers form an ordering of all the objects with the same
fiscal year, and different fiscal years start from one, so there are duplicate
order numbers across fiscal years
   * @param groupOrderNumber the integer rank order of the account group within the account type associated
with the group for this fiscal year; the numbers form a rank order for groups
within types for each fiscal year, and the rank order repeats for different
fiscal years, resulting in duplicate order numbers in different fiscal years
   * @param accountType foreign key used by setter to query associated object
   * @param groupName foreign key used by setter to query associated object
   * @param group the group into which the account is aggregated
   */
  public AbstractBsFiscalYearAccount(IPrimaryKey key, com.poesys.accounting.db.account.IAccount accountsObject, com.poesys.accounting.db.account.IAccountGroup groupObject, com.poesys.accounting.db.account.IFiscalYear yearsObject, java.lang.String accountName, java.lang.String entityName, java.lang.Integer year, java.lang.Integer accountOrderNumber, java.lang.Integer groupOrderNumber, java.lang.String accountType, java.lang.String groupName, com.poesys.accounting.db.account.IAccountGroup group) {
    super(new FiscalYearAccountProxy(new FiscalYearAccount(key, accountsObject, groupObject, yearsObject, accountName, entityName, year, accountOrderNumber, groupOrderNumber, accountType, groupName, group)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IFiscalYearAccount> other = (IDto<IFiscalYearAccount>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IFiscalYearAccount> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * the integer rank order of the account within the associated account group for
   * this fiscal year; the numbers form an ordering of all the objects with the same
   * fiscal year, and different fiscal years start from one, so there are duplicate
   * order numbers across fiscal years
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.Integer accountOrderNumber
   */
  public java.lang.Integer getAccountOrderNumber() {
    return dto.getAccountOrderNumber();
  }

  /**
   * <p>
   * Set the accountOrderNumber.
   * </p>
   * <p>
   * the integer rank order of the account within the associated account group for
   * this fiscal year; the numbers form an ordering of all the objects with the same
   * fiscal year, and different fiscal years start from one, so there are duplicate
   * order numbers across fiscal years
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @param accountOrderNumber the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter accountOrderNumber is null
   */
  public void setAccountOrderNumber(java.lang.Integer accountOrderNumber) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setAccountOrderNumber(accountOrderNumber);
  }

  /**
   * <p>
   * the integer rank order of the account group within the account type associated
   * with the group for this fiscal year; the numbers form a rank order for groups
   * within types for each fiscal year, and the rank order repeats for different
   * fiscal years, resulting in duplicate order numbers in different fiscal years
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.Integer groupOrderNumber
   */
  public java.lang.Integer getGroupOrderNumber() {
    return dto.getGroupOrderNumber();
  }

  /**
   * <p>
   * Set the groupOrderNumber.
   * </p>
   * <p>
   * the integer rank order of the account group within the account type associated
   * with the group for this fiscal year; the numbers form a rank order for groups
   * within types for each fiscal year, and the rank order repeats for different
   * fiscal years, resulting in duplicate order numbers in different fiscal years
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @param groupOrderNumber the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter groupOrderNumber is null
   */
  public void setGroupOrderNumber(java.lang.Integer groupOrderNumber) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setGroupOrderNumber(groupOrderNumber);
  }

  /**
   * <p>
   * the group into which the account is aggregated
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsAccountGroup group
   */
  public com.poesys.accounting.bs.account.BsAccountGroup getGroup() {
    // Return 4
    return new com.poesys.accounting.bs.account.BsAccountGroup(dto.getGroup());
  }

  /**
   * <p>
   * Set the group.
   * </p>
   * <p>
   * the group into which the account is aggregated
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @param group the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter group is null
   */
  public void setGroup(com.poesys.accounting.bs.account.BsAccountGroup group) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setGroup(group == null ? null : group.toDto());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.String accountType
   */
  public java.lang.String getAccountType() {
    // Return 3
    return dto.getAccountType();
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.String groupName
   */
  public java.lang.String getGroupName() {
    // Return 3
    return dto.getGroupName();
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsFiscalYearAccount object.
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsFiscalYear fiscalYear
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public com.poesys.accounting.bs.account.BsFiscalYear getFiscalYear() throws java.sql.SQLException {
    // Return 4
    return new com.poesys.accounting.bs.account.BsFiscalYear(dto.getFiscalYear());
  }

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsFiscalYearAccount object.
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a com.poesys.accounting.bs.account.BsAccount account
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public com.poesys.accounting.bs.account.BsAccount getAccount() throws java.sql.SQLException {
    // Return 4
    return new com.poesys.accounting.bs.account.BsAccount(dto.getAccount());
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.String accountName
   */
  public java.lang.String getAccountName() {
    return dto.getAccountName();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.String entityName
   */
  public java.lang.String getEntityName() {
    return dto.getEntityName();
  }

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties as data member
   * </p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object FiscalYearAccount</li>
   * </ul>
   * @return a java.lang.Integer year
   */
  public java.lang.Integer getYear() {
    return dto.getYear();
  }
}